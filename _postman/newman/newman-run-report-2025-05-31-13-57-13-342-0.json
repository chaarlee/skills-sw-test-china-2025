{
  "collection": {
    "_": {
      "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "exporter_id": "30174363"
    },
    "item": [
      {
        "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
        "name": "POST login",
        "request": {
          "url": {
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                "});",
                "",
                "pm.environment.set(\"token\", response.token);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: null,",
                "        password: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Username and password are required\",",
                "    },",
                "    {",
                "        username: \"user10\",",
                "        password: \"password\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"jondoe\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"123456\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"Login successful\",",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    console.log(\"All test cases done.\");",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
            }
          }
        ]
      },
      {
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "name": "GET players",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "limit",
                "value": "{{limit}}"
              },
              {
                "key": "page",
                "value": "{{page}}"
              },
              {
                "key": "country",
                "value": "{{country}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        limit: null,",
                "        page: null,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 2,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 0,",
                "        page: -1,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"HU\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"ASDASD\",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined,",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
            }
          }
        ]
      },
      {
        "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
        "name": "GET player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: 1,",
                "        expectedStatus: 404,",
                "        expectedMessage: \"Player not found\",",
                "    },",
                "    {",
                "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "848c3232-b530-4865-9c25-7b74569d1e53",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
            }
          }
        ]
      },
      {
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "name": "POST player",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"What \",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer {}\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 0,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: -50,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"ASDASD\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 201,",
                "        expectedMessage: undefined",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "pm.environment.set(\"playerId\", response.id);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
            }
          }
        ]
      },
      {
        "id": "1adafeaf-6354-4074-9828-065f0d32b085",
        "name": "DELETE player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"What X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 204,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    if (currentCase.id === undefined) {",
                "        currentCase.id = pm.environment.get(\"playerId\");",
                "    }",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.code === 204 ? null : pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
            }
          }
        ]
      },
      {
        "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
        "name": "GET stats",
        "request": {
          "url": {
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "240fea49-6a7c-4d48-a7da-f1727d2568fe",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response keys are valid\", function () {",
                "    Object.keys(pm.response.json()).forEach(key => {",
                "        pm.expect(key.length).to.eql(2);",
                "        pm.expect(key.toUpperCase()).to.eql(key);",
                "    })",
                "});"
              ],
              "_lastExecutionId": "bce592dd-0d6b-4e97-be7d-fe46162ee967"
            }
          }
        ]
      },
      {
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "name": "GET evaluate texas",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        hand: \"AcAs\",",
                "        board: \"AhKhQhJhTh\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"KhQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"high card\"",
                "    },",
                "    {",
                "        hand: \"3sQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"pair\"",
                "    },",
                "    {",
                "        hand: \"3s5h\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"two pair\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"three of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4d\",",
                "        board: \"Ah5d6c9s7s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight\"",
                "    },",
                "    {",
                "        hand: \"3h4h\",",
                "        board: \"Ah5h6c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"flush\"",
                "    },",
                "    {",
                "        hand: \"3h3s\",",
                "        board: \"3c4h4c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"full house\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h3c6c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"four of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4s\",",
                "        board: \"5s6s7s9sTs\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight flush\"",
                "    },",
                "    {",
                "        hand: \"As4s\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"AsAs\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 500,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"ASDAA\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"1234\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"1234567890\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: undefined,",
                "        board: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
            }
          }
        ]
      },
      {
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "name": "GET evaluate omaha",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "349d59ad-8500-4668-b487-b1494606eab7",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        \"hand\": \"QhJh9d2c\",",
                "        \"board\": \"AhKhTh8h2d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"royal flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9h8h7h6d\",",
                "        \"board\": \"ThJhQh2c3d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight flush\"",
                "    },",
                "    {",
                "        \"hand\": \"7s7c2d3h\",",
                "        \"board\": \"7d7hQdKs5s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"four of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AdAh9s9c\",",
                "        \"board\": \"Ac8dQs8s3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"full house\"",
                "    },",
                "    {",
                "        \"hand\": \"5h6h9c2d\",",
                "        \"board\": \"AhKhTh8h3h\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9d8c7h2s\",",
                "        \"board\": \"6s5cThJcQd\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight\"",
                "    },",
                "    {",
                "        \"hand\": \"QcQs3d7s\",",
                "        \"board\": \"Qh9h2c5d7d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"three of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AsKd3c2h\",",
                "        \"board\": \"AhKc4d7s8c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"two pair\"",
                "    },",
                "    {",
                "        \"hand\": \"6c7d3s2h\",",
                "        \"board\": \"AhKhTdJd3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"pair\"",
                "    },",
                "    {",
                "        \"hand\": \"2d5s9cJd\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"high card\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"2s3s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": null,",
                "        \"board\": undefined,",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"12345678\",",
                "        \"board\": \"2d3d4d5d6d\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"1234567890\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d2d2d2d\",",
                "        \"board\": \"2d2d2d2d2d\",",
                "        \"expectedStatus\": 500,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
            }
          }
        ]
      },
      {
        "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17",
        "name": "GET coverage",
        "request": {
          "url": {
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f6a52e77-7e75-4503-a722-95ada66d6ca1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b92909c-8ba1-423d-a03d-308f8c5f305d"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "24083479-38c0-416b-8697-3c25ab821413",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "9d8702f9-427a-49c6-b6e8-724aaf50c48f"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "aaa6d189-7a09-440a-91a1-95d98b40b116",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "ab6c77eb-d843-43c9-809d-f64313d60e52"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "name": "_Poker API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "41a926eb-643e-4509-8047-73eae056243b",
    "values": [
      {
        "type": "any",
        "value": "{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}",
        "key": "token"
      },
      {
        "type": "any",
        "value": "04935cc9-eaab-470f-8ad9-7431f9fac285",
        "key": "playerId"
      }
    ]
  },
  "globals": {
    "id": "6131489a-3414-4079-87b8-4805d9afd38b",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 254,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 103,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 128,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 126,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1.9375,
      "responseMin": 1,
      "responseMax": 25,
      "responseSd": 2.9679275176459416,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748699832274,
      "completed": 1748699833336
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "145c9c90-0b01-40e3-93cc-167678d54dfc",
          "httpRequestId": "f8fb6116-78a9-4135-a59a-bbfb4602d264"
        },
        "item": {
          "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1cb2906d-0aca-425a-8e2a-295562f69f47",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "46",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"null\",\n    \"password\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "4d622fdd-c9f1-479c-8a9a-78f7efed5db9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "46"
            },
            {
              "key": "ETag",
              "value": "W/\"2e-/Dk6jMda4g9eGLLFdPKg+jiG/7M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 25,
          "responseSize": 46
        },
        "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Username and password are required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "64724b55-5d7e-4a79-bef2-1c07a1d0693b",
          "httpRequestId": "3f4303fc-6c56-4156-bbe4-369cad0dfbec"
        },
        "item": {
          "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "28a4441e-4402-4025-be8d-f4758430732d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "56",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user10\",\n    \"password\": \"password\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bc4e6a12-0483-4156-9ab5-52b60cc79056",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 24
        },
        "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "9bbfe78e-0e81-4ed3-a35b-bc332f25669a",
          "httpRequestId": "f7c373b6-79ba-4cea-8e73-91d714d7de90"
        },
        "item": {
          "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d73c439e-bf5d-4f56-aa69-16d529a5f21f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"jondoe\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c7d788e0-b6bf-40a7-bf63-5b4424a7f635",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6f60484d-5ee9-4925-9fef-b67fa34d7430",
          "httpRequestId": "543e06ef-2de5-4ab6-904e-a3818b113f85"
        },
        "item": {
          "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "03d610f1-db1a-4b64-97f0-4d63fdf837fd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "2773646a-3d18-4242-9c4e-f021a24c249a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-TNcmxQOuytIrWnZORQ7vJrlFjUI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              123,
              92,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              92,
              34,
              58,
              92,
              34,
              117,
              115,
              101,
              114,
              49,
              92,
              34,
              44,
              92,
              34,
              104,
              97,
              115,
              104,
              92,
              34,
              58,
              92,
              34,
              77,
              106,
              65,
              121,
              78,
              83,
              48,
              119,
              78,
              83,
              48,
              122,
              77,
              86,
              81,
              120,
              77,
              122,
              111,
              49,
              79,
              84,
              111,
              120,
              77,
              108,
              111,
              61,
              92,
              34,
              44,
              92,
              34,
              118,
              97,
              108,
              105,
              100,
              65,
              116,
              92,
              34,
              58,
              92,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              51,
              49,
              84,
              49,
              51,
              58,
              53,
              57,
              58,
              49,
              50,
              90,
              92,
              34,
              125,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 144
        },
        "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is Login successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "826a194c-41c8-4acd-a61d-ec2fb1618eb2",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "94f09083-8963-4474-a3d6-b97cf26590ee"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "null"
              },
              {
                "key": "page",
                "value": "null"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01bd1a40-d746-49a0-a916-0167f0b7aca5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a52dcd00-19b4-4931-bd19-1941d7d2fa9b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57a83be3-ed1c-4ff1-af61-8f40eb8c69db",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9ea9e652-1fae-48bd-96f6-0a618330f2fb"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abd14bd6-4111-4443-b722-733e584069b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "eae9b1dc-a51c-43ab-99fa-eb054d2a2afd",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e2ca4d2b-1c16-47cf-acd2-60a859486dba",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc020dc5-a120-43e1-9d1a-8f8c5d0764cb"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "2"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5c8cbfac-b5a8-4311-8415-02e5be099396",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4af31a8a-89b7-4369-bd2d-72dba186c6c7",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3bd8e32-26f1-4e1a-a597-da32b68f237a",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "d6a0041b-6987-4fb1-b70b-0c1caafe0312"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "0"
              },
              {
                "key": "page",
                "value": "-1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f63d063e-bf51-4fca-ac41-11210d8c62b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4d3bf7be-26a2-46d3-857e-cdecb567d9d5",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "44d6eb91-511a-4ccd-a2d0-b970e5363b16",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9919e532-85b8-4e1d-b39a-c8caf382aa51"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "HU"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5d42b072-bf40-490f-a5c1-f4c67ccfb398",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "956e2128-ba95-4a74-b8ef-fb9b68ca04fd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "486"
            },
            {
              "key": "ETag",
              "value": "W/\"1e6-+B8jZJHJc0eIaNf28rYBy/b0E8I\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              102,
              53,
              55,
              48,
              48,
              97,
              56,
              45,
              54,
              52,
              52,
              50,
              45,
              52,
              102,
              102,
              57,
              45,
              57,
              102,
              55,
              101,
              45,
              54,
              49,
              56,
              48,
              102,
              100,
              50,
              51,
              52,
              49,
              50,
              101,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              118,
              97,
              54,
              50,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              108,
              105,
              115,
              101,
              111,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              45,
              109,
              101,
              100,
              104,
              117,
              114,
              115,
              116,
              48,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              53,
              49,
              45,
              48,
              49,
              45,
              49,
              55,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              54,
              53,
              51,
              50,
              46,
              53,
              56,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              99,
              51,
              97,
              100,
              53,
              49,
              53,
              45,
              54,
              55,
              53,
              51,
              45,
              52,
              51,
              102,
              100,
              45,
              57,
              52,
              55,
              52,
              45,
              98,
              54,
              54,
              48,
              100,
              51,
              52,
              50,
              57,
              54,
              98,
              54,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              97,
              110,
              100,
              105,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              107,
              97,
              116,
              101,
              108,
              121,
              110,
              51,
              53,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              54,
              45,
              48,
              49,
              45,
              49,
              53,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              51,
              48,
              51,
              49,
              46,
              52,
              55,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              50,
              101,
              102,
              49,
              99,
              101,
              51,
              45,
              97,
              97,
              53,
              56,
              45,
              52,
              98,
              52,
              53,
              45,
              97,
              50,
              56,
              48,
              45,
              99,
              51,
              51,
              56,
              99,
              102,
              97,
              102,
              54,
              54,
              97,
              98,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              110,
              105,
              100,
              50,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              105,
              111,
              118,
              97,
              110,
              110,
              121,
              46,
              119,
              101,
              115,
              116,
              54,
              64,
              104,
              111,
              116,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              54,
              55,
              45,
              48,
              56,
              45,
              50,
              51,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              56,
              49,
              49,
              46,
              57,
              57,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 486
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ace39ee-acf1-4589-845d-6cdb06f9117f",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eecd3f85-558f-4194-b797-6efa38c2bc13"
        },
        "item": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "ASDASD"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7dec12a9-2c80-4aa0-b854-23274d08c652",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c53a9095-8398-48fc-a97e-3aeb0016d9ea",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 400",
              "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0232684-91a4-4b05-86a4-41316cfd594f",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "bb537a17-84cd-4d2a-aa5f-501e262079e7"
        },
        "item": {
          "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "848c3232-b530-4865-9c25-7b74569d1e53",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f067d1c4-0a88-4abf-a52d-d94b7ec981d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a644ee23-b710-44dc-bc11-6fe19eb7fb95",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Message is Player not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "78adcda4-a307-416f-98d1-a1672fbd5e63",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "4c7194ad-f6a1-47ba-8ec4-bbdd6ba4d89c"
        },
        "item": {
          "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "848c3232-b530-4865-9c25-7b74569d1e53",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "df77015a-4527-4650-913e-2fd4729f033a"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "26bd3960-81b9-4b5e-82f7-d4dd8abd5dec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a70c5e35-51ee-4cbd-ae39-a9fc9d916f68",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "163"
            },
            {
              "key": "ETag",
              "value": "W/\"a3-X6SgfL4ACXucGO10N3VK+h28gzA\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              55,
              55,
              48,
              49,
              53,
              97,
              45,
              52,
              53,
              50,
              55,
              45,
              52,
              54,
              53,
              48,
              45,
              57,
              49,
              51,
              101,
              45,
              50,
              102,
              100,
              52,
              55,
              50,
              57,
              102,
              48,
              51,
              51,
              97,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              100,
              105,
              99,
              101,
              52,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              121,
              109,
              111,
              110,
              100,
              46,
              99,
              111,
              108,
              108,
              105,
              110,
              115,
              55,
              49,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              48,
              45,
              49,
              49,
              45,
              49,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              57,
              53,
              46,
              57,
              54,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              75,
              82,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 163
        },
        "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1ee333cc-76e6-498e-9937-b1af849d9761",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7e9cd926-5f0a-45ef-8dba-d5c830bb1c1f"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60f58ae4-75e6-4658-bf5a-43dc0f5647b8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "881cee42-78c0-471a-816a-cd357c9409af",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f456418-48aa-421d-b95c-ff4ae12112da",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "959c9ff4-be57-428b-8f66-d136a857c2d4"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {}{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b325530-2b7e-4b1e-ba46-43c574b3f502",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "dcd218c5-4464-473f-b009-13ba5445c0b4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0769a398-38e1-48bd-a248-beffc8ff8708",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa18c81a-56ea-49a3-8a9e-1575eb58f205"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "27c2edd1-f13c-4639-b75e-95e6b1a1107d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a57732c1-de9f-4d6d-a4b9-92ef428c9c4f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-qeX1O6o8DzDHKvaBbkoAq19nEEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8b5fff7c-35c2-43b7-a3a1-6f989b202d37",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b2bf1ce3-9743-4f65-8c72-45e9ca59b2a1"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cebc234e-28be-4530-ba74-09c18ca91d81",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f1529190-25c1-454a-a739-8799e7b59315",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-ZXxU9PuyF+UpUGdndifSZ6AtgHo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3029cc7a-6e05-4a55-8031-33db4dde65ae",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "927b6f2d-6caa-4b7d-8739-4f91a166ac92"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ab0a6bab-dd4b-45b6-8ada-09d60dc03290",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "113",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "69fc06f0-a102-43b2-8a10-b297e940dfff",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-vNY7RilGMrC5/vB4il5a/uRHX0s\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              105,
              114,
              116,
              104,
              32,
              100,
              97,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "85fdf020-6898-4762-b7bf-29cd34238345",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f68ae9dd-a26e-40f8-b55c-fa38ead40080"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e8309eb-5fdc-49f7-a69a-1fe37ee89818",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6aaae04b-1beb-4919-9aa8-892986349948",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "96fc1e1b-27db-4ff2-8b09-f27a16998183",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b6b4e2c5-fa13-461d-a6e9-4b0b7c17b5a7"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f02107f5-42af-4b8c-b947-f5b54745101f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "33a88351-048c-4b53-a188-da4bb0aabd3a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3a8b506-241c-42c4-8c8c-c3ede49b3662",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a0de2fdf-abca-40f1-b0d4-e15a8b212d7e"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f77ab2e1-ef78-4fda-a13a-a692e7ae8b78",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "120",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 0,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a773a1eb-b618-4466-9582-4efe4b0010c4",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 42
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "83ac1a96-1490-4046-9ef0-a37587e25a76",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1d6b8d0d-9d23-4efb-92ad-4e79db7433c5"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "62cb5583-1a73-459d-8924-f52e957ac354",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": -50,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9ee22dce-289f-43b2-a836-b787462e60a1",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 42
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c90f797c-1c78-411b-9fe2-75332ec8583e",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d386db77-9cfa-41ba-9c05-1557f4201e80"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed49f5bf-28b6-44f6-89cc-1801976d4cdb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "121",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "be4eac26-d9b0-4e59-a114-fa3cc3e2a1d4",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "764516f5-4c43-4d19-9ca3-4cb3109fb84b",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3f0c4a8a-da39-461d-a162-198d8fb3389a"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "83dc9392-930b-4d00-ac79-a004f76860eb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "127",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"ASDASD\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bdef29b1-9501-4510-a2b3-f269073510a9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "682d2ad7-521c-4db6-a3b2-968523da314d",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "1e34f860-1e17-420d-83b3-ab48b15feb4b"
        },
        "item": {
          "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a6451d54-63a7-4835-a056-381bd532ab51",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c3c42bb3-f75c-4a00-88a6-7fa61870f6d8",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "146"
            },
            {
              "key": "ETag",
              "value": "W/\"92-LbOI4y9nQmheWDNN4KKaF1FsUKs\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              100,
              111,
              101,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              52,
              57,
              51,
              53,
              99,
              99,
              57,
              45,
              101,
              97,
              97,
              98,
              45,
              52,
              55,
              48,
              102,
              45,
              56,
              97,
              100,
              57,
              45,
              55,
              52,
              51,
              49,
              102,
              57,
              102,
              97,
              99,
              50,
              56,
              53,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 146
        },
        "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b3a70beb-fc32-4032-a01e-5facca55d4a2",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "4829dfba-64ed-498f-988e-67ad6e79e60d"
        },
        "item": {
          "id": "1adafeaf-6354-4074-9828-065f0d32b085",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4eed2ea3-6e8a-4302-97a3-9bcbc40c5e12",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "6c0fb961-3b95-48c0-8d12-7d8025781bfc",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "1adafeaf-6354-4074-9828-065f0d32b085",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cfe99528-9b51-4275-abdc-d86957cc4278",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "cd1b2c29-442a-4516-b4fe-ace3c24dc331"
        },
        "item": {
          "id": "1adafeaf-6354-4074-9828-065f0d32b085",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c635f11f-b7f5-497f-8b57-0306d1bde4e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "23efccfc-d83b-48a8-984a-890ffc21f450",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "1adafeaf-6354-4074-9828-065f0d32b085",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1dc38f7e-1eb9-429e-9244-9168b74060b7",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c2d5d8e4-5be8-46e8-8017-0c410617193e"
        },
        "item": {
          "id": "1adafeaf-6354-4074-9828-065f0d32b085",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "04935cc9-eaab-470f-8ad9-7431f9fac285"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1fda5383-db4e-493a-9d34-aff05c7a4dcc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "1f385623-8319-4159-be51-ddf60e30f6bc",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 0
        },
        "id": "1adafeaf-6354-4074-9828-065f0d32b085",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "11601662-7d3d-4596-9c4f-e06a70217e34",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d77fbd55-64ad-4915-b177-cf9f5936def7"
        },
        "item": {
          "id": "1adafeaf-6354-4074-9828-065f0d32b085",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMzo1OToxMlo=\",\"validAt\":\"2025-05-31T13:59:12Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6e46b704-a8fb-45e2-becd-3a55203815ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "0324cb37-f2ee-402b-b808-2a46fa67c4ea",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 28
        },
        "id": "1adafeaf-6354-4074-9828-065f0d32b085",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "36616f64-2eba-4453-a2d5-5afd16101e8e",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6eb8f9e1-d766-45a8-9e35-c8da8b0b7d6f"
        },
        "item": {
          "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
          "name": "GET stats",
          "request": {
            "url": {
              "path": [
                "api",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "240fea49-6a7c-4d48-a7da-f1727d2568fe",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response keys are valid\", function () {",
                  "    Object.keys(pm.response.json()).forEach(key => {",
                  "        pm.expect(key.length).to.eql(2);",
                  "        pm.expect(key.toUpperCase()).to.eql(key);",
                  "    })",
                  "});"
                ],
                "_lastExecutionId": "bce592dd-0d6b-4e97-be7d-fe46162ee967"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0623a975-3179-4a49-bd86-81acc75743f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "33355167-f44b-47d7-9901-3b3781f5596c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "113"
            },
            {
              "key": "ETag",
              "value": "W/\"71-psExknJVFK4CoX3xwAuOvO5fRTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              66,
              82,
              34,
              58,
              54,
              44,
              34,
              65,
              85,
              34,
              58,
              57,
              44,
              34,
              85,
              83,
              34,
              58,
              54,
              44,
              34,
              73,
              78,
              34,
              58,
              57,
              44,
              34,
              72,
              85,
              34,
              58,
              51,
              44,
              34,
              67,
              79,
              34,
              58,
              55,
              44,
              34,
              75,
              82,
              34,
              58,
              56,
              44,
              34,
              72,
              75,
              34,
              58,
              57,
              44,
              34,
              74,
              80,
              34,
              58,
              56,
              44,
              34,
              70,
              82,
              34,
              58,
              51,
              44,
              34,
              83,
              71,
              34,
              58,
              55,
              44,
              34,
              71,
              66,
              34,
              58,
              53,
              44,
              34,
              67,
              65,
              34,
              58,
              53,
              44,
              34,
              67,
              78,
              34,
              58,
              55,
              44,
              34,
              77,
              79,
              34,
              58,
              51,
              44,
              34,
              68,
              69,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 113
        },
        "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response keys are valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "931f7b52-b470-4f93-9a05-ef55447798cc",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ac4bbe44-5c09-46bb-bafc-be9e5da65675"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AcAs"
              },
              {
                "key": "board",
                "value": "AhKhQhJhTh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb021d62-6a43-45b2-8c78-f1aca9bcca91",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "86ee1470-ed71-4af3-85a3-abc70e77deb2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "007e2302-51fa-4ed4-9ef4-6652a09a13de",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0ed2c30b-cfa9-44b6-81ed-e6143ab0302a"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KhQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0d3ae8b1-0a82-4129-b03c-2db966ec9626",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8fa38ea6-75b7-48df-8077-b47de168a34b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "395304b1-f69f-4962-9f57-909cb578d965",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fccdfb49-0ecf-4ca4-9223-6d0f9bf0bc6a"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3sQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ed6d2ce2-0666-48aa-b7a9-b9ea4d1f8899",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "48108f62-c8c9-4ed5-b662-2ba5f306d755",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 19
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f32b4226-884f-4803-a861-f244b9810d5d",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0c8d2040-6136-4d30-a3a5-f9cbb9e20a53"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s5h"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "10181c38-1886-4eb3-ab58-88656e1eb7c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "17d83301-d220-40ea-bcd0-e564bd7f56e9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1dd4103d-21e1-46ab-ac2f-47ee3ed082a1",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "06ad305e-651d-405f-bb70-b8209917c994"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "acac0420-42f6-455c-9840-7e2620c4010e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2977b26e-3f7d-47bf-b0bf-76c501f61f70",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "955d79c2-0092-4fb3-94ba-6bd7af0813d4",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ee1f6599-59d7-4c1e-b919-6ae20135202a"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4d"
              },
              {
                "key": "board",
                "value": "Ah5d6c9s7s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1cae39db-43c7-44d1-bfd5-188d762bc782",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "31bf91cc-8c3d-41c7-86d7-6cdb814564f8",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "54f0b13f-4d76-49be-942b-2680481c7115",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2c8a6865-b577-4737-ae44-7d35653ee540"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h4h"
              },
              {
                "key": "board",
                "value": "Ah5h6c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "09141b07-be03-4a28-8f1a-c0857661bb9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e40bf8f8-3ea0-4209-a06a-3a46ea18ca75",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "faec83de-2c8e-4f08-bcf2-4bd26b1bca0b",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "eb890799-4cde-4c2a-8a00-ad13fcde2b3e"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h3s"
              },
              {
                "key": "board",
                "value": "3c4h4c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f63e5e96-8fe7-4be6-a106-7b50170a3634",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "df7e280c-82b7-4a18-ae65-3d486dddd1f0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4fe37d2a-db86-46e8-a8c5-59f1a5b4ac6e",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "baf963d5-dc1b-4c9d-8e53-5dbafb2972c5"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h3c6c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75c7d028-0f3a-4c91-90b1-15518b2371ac",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ecae4923-a24b-4c7d-b4a1-38f0c702bdfd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d007626a-2247-4d6f-bd2d-372982a5d5a1",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d750eb4e-4dcf-4a34-8f3f-cdd0ac0bf080"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4s"
              },
              {
                "key": "board",
                "value": "5s6s7s9sTs"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2c4c991a-cf21-4108-9bca-b4f2eed1e8f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a7b5e5d8-5b8a-471a-9996-0e60376bb4d3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f1731377-b8a5-4419-be36-bdcfb45e4075",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a98fa931-16ae-4ce7-b8af-1336ba1bf89e"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "As4s"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20378b28-bf1c-46b8-801c-666d51329945",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2af64ead-ac50-476b-b5d0-d80a983b9ec6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "206cfa2b-22f2-4631-972a-a4a6703861bb",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bce5b880-77ff-4360-9659-ab223c13930f"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsAs"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "910cd498-0b41-44b2-a91c-c6c00d2cd4e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3238d33f-9123-404e-8bf6-375c59c6240f",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:12 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ee396ad3-4863-4af2-afa1-b11f54920f4d",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "78a6403a-c7b2-4947-b8ca-7f2945bd1bd3"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "588dd79c-fcb9-4026-ba19-1d0a9178abae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a9828db3-f701-4b1f-be2b-1e378345180d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f50ea4b1-7cc7-45d3-a9b7-fbe24039a06f",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f9e093e1-0a44-4d95-900e-43e3cc8c95cc"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d0573b7c-1753-40fa-a3f9-82a7b9452886",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d31472c7-0725-4530-b316-b26393e248cf",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "85886e08-efdd-4965-be56-aac871993809",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "15be7cce-eeed-49d7-a4c0-f5c6170f3366"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "ASDAA"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "267abddc-b5f6-47b5-a310-e702f3bdb0a4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3775715b-e1d7-4594-8d6a-43537c471a92",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f32e6010-7eb5-4f4b-a188-1e6771fefe26",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "77b570a5-dbc8-4c3e-a603-7664d0056846"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "1234"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b11e733-e40e-420a-92a2-2c1ebb43b77f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a17fb161-414a-430e-ba96-2162662efede",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6578b591-ecdc-4bfa-a443-4f5402c1e366",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3b439671-06a9-4b34-ae29-be8097496982"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc71cfe8-0475-4e3f-9198-e2fc5a0b1fea",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "364146e7-f612-4622-bf17-cae75fe765dc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e9d08d50-9a61-46db-a0f9-a6b64f9454dc",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8576bf3c-c3d5-468e-8e8c-75b035317e80"
        },
        "item": {
          "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": ""
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6b787a43-b5c4-47e5-8d61-57df9d0e4dbd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "830b1a6b-e91e-4d5c-acad-4bbdeb90db4a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4da8551e-7caf-4451-9784-abee68c34e68",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a49d967a-bb68-4a26-94c6-c8926bb476e8"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QhJh9d2c"
              },
              {
                "key": "board",
                "value": "AhKhTh8h2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5bcf01af-09c2-4526-b543-e7ebf01011dd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ba344dc0-b136-4e90-b27c-5eff5171afde",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "734b0e3e-f1b0-4b25-bdb6-2e7c5e282dea",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5c484d32-84d6-40c9-be8e-6cdfe7e0d655"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9h8h7h6d"
              },
              {
                "key": "board",
                "value": "ThJhQh2c3d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0e06db1f-108b-459e-a607-8479b41d9f1a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fb6e34a7-5f12-477a-b693-57475647cb3b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "01378c83-fb5b-48bc-a0f4-fdbd49ebe6a2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "27701976-38cf-4dff-98e1-9c8751d668d3"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "7s7c2d3h"
              },
              {
                "key": "board",
                "value": "7d7hQdKs5s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be248c35-9079-43bb-bf9c-c825a862f63f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "82a3395a-d8d2-4393-b206-b3411917a978",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "08cc3244-d528-4bc0-85ab-b4cce754e753",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f1fb792d-8de9-4f95-b1c6-64ef286efea0"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AdAh9s9c"
              },
              {
                "key": "board",
                "value": "Ac8dQs8s3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35cc4205-08fc-4343-b474-f652191e114b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "29ad322a-994c-4006-bcbf-4c58120e6ddc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "23412143-39ac-4b5b-8142-2361bed518e8",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "01cab7eb-28f9-4a5c-8b51-ba01815c25c7"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "5h6h9c2d"
              },
              {
                "key": "board",
                "value": "AhKhTh8h3h"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4a09b11-9697-4aba-92f0-373d2ee394c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "61ce607e-0473-429f-a5d8-5cb854677ac3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25f5c138-525c-449d-9c74-70337123c473",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b5e78e1b-df8a-49cc-8ed2-3da7c7562ad8"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9d8c7h2s"
              },
              {
                "key": "board",
                "value": "6s5cThJcQd"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9180ce0-8ef4-445e-ba4c-c147090df4e8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "92f2f332-ae3d-4e02-9dfb-15463fabab85",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "25261cbb-78d3-42df-a1a9-b9cd3aa11926",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c92432a7-e7fd-4947-830b-fcd337f463eb"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QcQs3d7s"
              },
              {
                "key": "board",
                "value": "Qh9h2c5d7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c9c9a6f2-90da-461a-b5ac-469eab7dc769",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e4ba9c6f-fa39-4b1a-8678-e88464c814ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "405603e8-71bc-4146-8ec5-597e9adb8226",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f775640a-f1c7-4493-a949-afe5d241d9e8"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsKd3c2h"
              },
              {
                "key": "board",
                "value": "AhKc4d7s8c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "08e7083c-ccd7-4275-b772-8502bca47ad2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f9ee7138-9c06-4e62-8be3-5b008941d571",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5b34147b-95ee-45d1-9a49-581cf693ce15",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c0d982ef-2312-4ac0-8553-bec7b1df5605"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "6c7d3s2h"
              },
              {
                "key": "board",
                "value": "AhKhTdJd3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b61c69fb-9806-430e-bd15-8ee17ee9197e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "387caab0-d405-4857-9048-2909464cfe95",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 19
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "db8aeaf9-713c-4ce1-937b-becda5120d65",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f18e6e77-344d-4577-ab8a-56af89054e69"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d5s9cJd"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dbff549d-71a9-4e34-8a09-d155ec193bb2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8806dddb-2989-4f72-9a58-1a72936c38ee",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1b6ec2a-513d-4767-8286-b7bdc352d228",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "44d9cdcb-3632-4dc5-aa37-b58e0a606970"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3525433-e96c-4cc6-abac-1e9c2726c0f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d30d2824-b38c-4222-a715-c8efb81079da",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9a77c615-a3e0-498e-93ac-f7822a0474ba",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "d23607a5-8daa-440c-84ed-d46b29c82886"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "2s3s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "50943a28-d2cf-4149-94a5-bb581f0dd1ab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d92bad5a-0148-426a-b317-75629c54a86e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90b0126d-1bc0-4f59-86d6-272e8073d8f4",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "704f6b1a-ff61-427f-99b3-b674c1b4e0c2"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "null"
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6da9040a-f2c2-4bcf-9a46-10c978a1ebf0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0243bd78-ec65-434a-8561-ad06b67390c0",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "79b3ec15-196f-4b78-b68a-4373ec3818d3",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "532bd291-a5d5-42d0-aaf3-a06dee63ea67"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "12345678"
              },
              {
                "key": "board",
                "value": "2d3d4d5d6d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "98accc7d-401e-4772-aea7-2e69380e9af6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "84be5521-10dc-4a15-bc20-4efd8047c6ec",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bfdb94f4-7a9b-483a-a3f6-5ebdf6fbd8ce",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "51179735-79cd-446e-81a4-c9cff29df04c"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "766bcced-d611-4fc1-a7d2-1804d3665672",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8921cd00-9f72-41e1-aed5-109273b206df",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4bf7280e-eb00-4e5f-a9cc-db1a79e3cb9b",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9891a7d4-99a6-450d-9dec-824e4c5285d9"
        },
        "item": {
          "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "349d59ad-8500-4668-b487-b1494606eab7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d2d2d2d"
              },
              {
                "key": "board",
                "value": "2d2d2d2d2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fe2baba5-b214-4228-808a-518e2acbb2a7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cbb5e666-bdd7-4db6-bdd9-04b6dd621746",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1beb31c-2cec-4b7a-8562-4548c44dcbeb",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b7009ff7-99de-4df0-8d6f-15addb7dfa07"
        },
        "item": {
          "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17",
          "name": "GET coverage",
          "request": {
            "url": {
              "path": [
                "api",
                "coverage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f6a52e77-7e75-4503-a722-95ada66d6ca1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2b92909c-8ba1-423d-a03d-308f8c5f305d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d74e1666-7a1c-434e-9355-9242f2af8752",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f1c6c435-df1e-4064-a7f3-a386e8daf5e3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "6700"
            },
            {
              "key": "ETag",
              "value": "W/\"1a2c-nkIAl7KYmH3poPBRgMQNTccu+5M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 13:57:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              53,
              46,
              57,
              50,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              55,
              50,
              46,
              55,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              57,
              55,
              46,
              51,
              55,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              51,
              56,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              93,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              125,
              44,
              34,
              116,
              101,
              115,
              116,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 6700
        },
        "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17"
      }
    ],
    "transfers": {
      "responseTotal": 9365
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "620e0a42-c110-4136-a31a-aadafb575db4",
          "timestamp": 1748699832428,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
                  }
                }
              ]
            },
            {
              "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
                  }
                }
              ]
            },
            {
              "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "848c3232-b530-4865-9c25-7b74569d1e53",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
                  }
                }
              ]
            },
            {
              "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
                  }
                }
              ]
            },
            {
              "id": "1adafeaf-6354-4074-9828-065f0d32b085",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
                  }
                }
              ]
            },
            {
              "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "240fea49-6a7c-4d48-a7da-f1727d2568fe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "bce592dd-0d6b-4e97-be7d-fe46162ee967"
                  }
                }
              ]
            },
            {
              "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
                  }
                }
              ]
            },
            {
              "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "349d59ad-8500-4668-b487-b1494606eab7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
                  }
                }
              ]
            },
            {
              "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6a52e77-7e75-4503-a722-95ada66d6ca1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b92909c-8ba1-423d-a03d-308f8c5f305d"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "24083479-38c0-416b-8697-3c25ab821413",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9d8702f9-427a-49c6-b6e8-724aaf50c48f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "aaa6d189-7a09-440a-91a1-95d98b40b116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ab6c77eb-d843-43c9-809d-f64313d60e52"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8080",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "57a83be3-ed1c-4ff1-af61-8f40eb8c69db",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "9ea9e652-1fae-48bd-96f6-0a618330f2fb",
          "scriptId": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
          "execution": "1496c181-8b3e-48aa-81d8-1e984af6dbb2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "bd398344-8d4b-4d06-9f6a-03b3176f52cb",
          "timestamp": 1748699832447,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
                  }
                }
              ]
            },
            {
              "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
                  }
                }
              ]
            },
            {
              "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "848c3232-b530-4865-9c25-7b74569d1e53",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
                  }
                }
              ]
            },
            {
              "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
                  }
                }
              ]
            },
            {
              "id": "1adafeaf-6354-4074-9828-065f0d32b085",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
                  }
                }
              ]
            },
            {
              "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "240fea49-6a7c-4d48-a7da-f1727d2568fe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "bce592dd-0d6b-4e97-be7d-fe46162ee967"
                  }
                }
              ]
            },
            {
              "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
                  }
                }
              ]
            },
            {
              "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "349d59ad-8500-4668-b487-b1494606eab7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
                  }
                }
              ]
            },
            {
              "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6a52e77-7e75-4503-a722-95ada66d6ca1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b92909c-8ba1-423d-a03d-308f8c5f305d"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "24083479-38c0-416b-8697-3c25ab821413",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9d8702f9-427a-49c6-b6e8-724aaf50c48f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "aaa6d189-7a09-440a-91a1-95d98b40b116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ab6c77eb-d843-43c9-809d-f64313d60e52"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8080",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "e2ca4d2b-1c16-47cf-acd2-60a859486dba",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "fc020dc5-a120-43e1-9d1a-8f8c5d0764cb",
          "scriptId": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
          "execution": "a8612b2e-d9b0-4a98-8a71-f65732d4d0f1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 400",
          "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "2943de630e4d4df5da94e8c1bdee38a3",
          "id": "c8b7e257-cb13-4eab-90a9-73cb643ba071",
          "timestamp": 1748699832495,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "4a4b9cbb-e6d5-441b-8c6e-6d417efc22c9",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91ab7d7c-54f4-44ce-baf4-bd327fa3e490",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e0c609de-e7a2-4842-b408-02ab74edd397"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c965e71c-472f-4c08-9a2f-86b7d1ef8a31",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "56c2d948-42bb-47fd-acad-aa66c7e0bad9"
                  }
                }
              ]
            },
            {
              "id": "70d3f1cd-beb8-457f-a236-5291daffe98e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e72e5265-0121-4d46-8b91-6ffdcb761690",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "af1b996e-0f25-4e9e-9c96-c058614de701"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "b39ea943-a780-4f71-b4dc-46e748129ab7"
                  }
                }
              ]
            },
            {
              "id": "85aa11fb-b6f2-4568-8ecf-abebd4d61e92",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c1b301a8-97f9-4b74-93c4-52da04bea267",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fffab0c5-3271-45cf-8d78-f0488ded51d5"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "848c3232-b530-4865-9c25-7b74569d1e53",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "50b20be5-d02b-4d1d-9ca9-94bcb35ef191"
                  }
                }
              ]
            },
            {
              "id": "0820e0f7-5a05-421e-ba82-29b5fb8a3665",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0026bd02-d563-4442-b98a-f024ca2be4d2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8359c96b-85c6-4d27-b857-a74a69466f7d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a0ce88e0-8c31-488d-ad04-871b3fee91c7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69e9c4dd-3ec9-4113-b6ae-07a782681ed6"
                  }
                }
              ]
            },
            {
              "id": "1adafeaf-6354-4074-9828-065f0d32b085",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c4ff07e2-74ac-4e77-9dbd-b98e1acd84f2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fa428dbc-5b03-4bcc-b5e5-6d8747f3e4f7"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "add8af04-0d6e-4d0d-8173-66fcbf95efbd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "9ba1bfb0-f561-453d-a24b-3c8a4435f3b0"
                  }
                }
              ]
            },
            {
              "id": "0bf5514a-2e36-413a-805d-0ec258413fc4",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "240fea49-6a7c-4d48-a7da-f1727d2568fe",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "bce592dd-0d6b-4e97-be7d-fe46162ee967"
                  }
                }
              ]
            },
            {
              "id": "4e1ea10d-a627-4a73-9342-67959b4bcf20",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "371b6ce8-2328-4b5a-afff-3476bb4b6415",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2a7df2a9-b7cd-4231-af1f-8d3a7b5e54ad"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "096d8708-cafd-4efa-8b33-98e9c314a434",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "2620d53c-c92a-405a-99f5-8251fcd4f113"
                  }
                }
              ]
            },
            {
              "id": "aa8684eb-2384-444e-a192-8dec9b4e35b3",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "349d59ad-8500-4668-b487-b1494606eab7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "23ad3b0b-2818-4c62-b659-e2c62fb433b3"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "679bd758-548f-4fdf-a7a2-cc6ed5abd0d8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "aad1803a-1368-4da9-97ed-e8bb410e98e2"
                  }
                }
              ]
            },
            {
              "id": "812c5e5f-efb3-4b3f-9b7c-a654fd38aa17",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f6a52e77-7e75-4503-a722-95ada66d6ca1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b92909c-8ba1-423d-a03d-308f8c5f305d"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "24083479-38c0-416b-8697-3c25ab821413",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "9d8702f9-427a-49c6-b6e8-724aaf50c48f"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "aaa6d189-7a09-440a-91a1-95d98b40b116",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "ab6c77eb-d843-43c9-809d-f64313d60e52"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8080",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "1ace39ee-acf1-4589-845d-6cdb06f9117f",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eecd3f85-558f-4194-b797-6efa38c2bc13",
          "scriptId": "5daddfb6-a951-4fc0-8358-0cb3af22a48c",
          "execution": "b39ea943-a780-4f71-b4dc-46e748129ab7"
        }
      }
    ],
    "error": null
  }
}