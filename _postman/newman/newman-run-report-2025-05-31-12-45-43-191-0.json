{
  "collection": {
    "_": {
      "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "exporter_id": "30174363"
    },
    "item": [
      {
        "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
        "name": "POST login",
        "request": {
          "url": {
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "06576ca8-2611-4eee-949e-f261a3893db6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                "});",
                "",
                "pm.environment.set(\"token\", response.token);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: null,",
                "        password: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Username and password are required\",",
                "    },",
                "    {",
                "        username: \"user10\",",
                "        password: \"password\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"jondoe\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"123456\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"Login successful\",",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    console.log(\"All test cases done.\");",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
            }
          }
        ]
      },
      {
        "id": "2330c71a-069d-4503-88b3-83d48179bc69",
        "name": "GET players",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "limit",
                "value": "{{limit}}"
              },
              {
                "key": "page",
                "value": "{{page}}"
              },
              {
                "key": "country",
                "value": "{{country}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "15abba42-66bd-49f0-b855-00a2577d7d24",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        limit: null,",
                "        page: null,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 2,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 0,",
                "        page: -1,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"HU\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"ASDASD\",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined,",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "32493a50-f7c0-482b-bc98-42231b686b5c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8af2eabd-963e-4635-aee3-0e0f2909948b",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "83077fff-62b1-4c0b-9c08-b9608a0e419d"
            }
          }
        ]
      },
      {
        "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
        "name": "GET player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "597efb10-cdef-4e59-80a0-f207ce3afe80",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: 1,",
                "        expectedStatus: 404,",
                "        expectedMessage: \"Player not found\",",
                "    },",
                "    {",
                "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "fbc5b8eb-4ee8-40a2-b14c-dca4c83cd9f9"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8cd84387-67cc-497e-bb92-b19bc3cb7608",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "bfb41815-7651-4914-a96e-80a222be541f"
            }
          }
        ]
      },
      {
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "name": "POST player",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "60689ee8-78d6-42f0-8f90-40e700718176",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"What \",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer {}\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 0,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: -50,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"ASDASD\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 201,",
                "        expectedMessage: undefined",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "pm.environment.set(\"playerId\", response.id);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
            }
          }
        ]
      },
      {
        "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
        "name": "DELETE player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"What X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 204,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    if (currentCase.id === undefined) {",
                "        currentCase.id = pm.environment.get(\"playerId\");",
                "    }",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.code === 204 ? null : pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
            }
          }
        ]
      },
      {
        "id": "7dc31fc9-200a-4f31-b63c-79933d805da4",
        "name": "GET stats",
        "request": {
          "url": {
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "e7128656-14ad-4c52-87ec-1a257bd804a6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response keys are valid\", function () {",
                "    Object.keys(pm.response.json()).forEach(key => {",
                "        pm.expect(key.length).to.eql(2);",
                "        pm.expect(key.toUpperCase()).to.eql(key);",
                "    })",
                "});"
              ],
              "_lastExecutionId": "67d35204-431f-4e5a-8747-da5d18489007"
            }
          }
        ]
      },
      {
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "name": "GET evaluate texas",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        hand: \"AcAs\",",
                "        board: \"AhKhQhJhTh\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"KhQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"high card\"",
                "    },",
                "    {",
                "        hand: \"3sQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"pair\"",
                "    },",
                "    {",
                "        hand: \"3s5h\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"two pair\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"three of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4d\",",
                "        board: \"Ah5d6c9s7s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight\"",
                "    },",
                "    {",
                "        hand: \"3h4h\",",
                "        board: \"Ah5h6c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"flush\"",
                "    },",
                "    {",
                "        hand: \"3h3s\",",
                "        board: \"3c4h4c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"full house\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h3c6c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"four of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4s\",",
                "        board: \"5s6s7s9sTs\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight flush\"",
                "    },",
                "    {",
                "        hand: \"As4s\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"AsAs\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 500,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"ASDAA\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"1234\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"1234567890\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: undefined,",
                "        board: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
            }
          }
        ]
      },
      {
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "name": "GET evaluate omaha",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        \"hand\": \"QhJh9d2c\",",
                "        \"board\": \"AhKhTh8h2d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"royal flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9h8h7h6d\",",
                "        \"board\": \"ThJhQh2c3d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight flush\"",
                "    },",
                "    {",
                "        \"hand\": \"7s7c2d3h\",",
                "        \"board\": \"7d7hQdKs5s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"four of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AdAh9s9c\",",
                "        \"board\": \"Ac8dQs8s3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"full house\"",
                "    },",
                "    {",
                "        \"hand\": \"5h6h9c2d\",",
                "        \"board\": \"AhKhTh8h3h\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9d8c7h2s\",",
                "        \"board\": \"6s5cThJcQd\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight\"",
                "    },",
                "    {",
                "        \"hand\": \"QcQs3d7s\",",
                "        \"board\": \"Qh9h2c5d7d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"three of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AsKd3c2h\",",
                "        \"board\": \"AhKc4d7s8c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"two pair\"",
                "    },",
                "    {",
                "        \"hand\": \"6c7d3s2h\",",
                "        \"board\": \"AhKhTdJd3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"pair\"",
                "    },",
                "    {",
                "        \"hand\": \"2d5s9cJd\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"high card\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"2s3s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": null,",
                "        \"board\": undefined,",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"12345678\",",
                "        \"board\": \"2d3d4d5d6d\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"1234567890\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d2d2d2d\",",
                "        \"board\": \"2d2d2d2d2d\",",
                "        \"expectedStatus\": 500,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
            }
          }
        ]
      },
      {
        "id": "fbd61f52-2c4c-475f-a167-51bf2c4bd594",
        "name": "GET coverage",
        "request": {
          "url": {
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "a74445a9-60fa-478b-b67b-016217c10e2e",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "c59f2142-0f37-43bc-b61c-d2db1e96be77"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "c5fe9797-872f-441e-be88-3bc7a2a5a39c",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "d9fc60e0-55d7-425e-bbf2-46cb2cec99d1"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "1da8a743-f138-48f1-ab89-5708830b9f78",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "a947940b-02a3-4876-aae4-05e475ff0e06"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:8080",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "name": "_Poker API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "34b33894-58d6-4a1a-973f-25d1adeebf34",
    "values": [
      {
        "type": "any",
        "value": "{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}",
        "key": "token"
      },
      {
        "type": "any",
        "value": "d125f934-716f-48b8-84aa-028957258224",
        "key": "playerId"
      }
    ]
  },
  "globals": {
    "id": "a6aba90d-25d7-4d91-a46b-e98d6da9561e",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 234,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 59,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 97,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 118,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 116,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2.254237288135594,
      "responseMin": 1,
      "responseMax": 36,
      "responseSd": 4.4705940163415185,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748695542200,
      "completed": 1748695543187
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2dda9d01-9b35-44be-9df4-7db9d12c131e",
          "httpRequestId": "bf560f7f-1ddc-4387-9958-75c2d4d8639c"
        },
        "item": {
          "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06576ca8-2611-4eee-949e-f261a3893db6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c0f3c2ef-2a4f-4b53-8f4c-03c6d6f6250b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "46",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"null\",\n    \"password\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b1519e11-468e-4c7b-9e2f-131635674018",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "46"
            },
            {
              "key": "ETag",
              "value": "W/\"2e-/Dk6jMda4g9eGLLFdPKg+jiG/7M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 36,
          "responseSize": 46
        },
        "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Username and password are required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "47c9bac3-9158-47ec-a31e-a617bc5ae0c3",
          "httpRequestId": "f452633d-7576-46e6-a917-86a67949f7b1"
        },
        "item": {
          "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06576ca8-2611-4eee-949e-f261a3893db6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24d2ae98-7526-4bb4-9101-4889cf26bca4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "56",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user10\",\n    \"password\": \"password\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3bc35a3a-b767-489e-8d3b-303415ece44e",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 24
        },
        "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e926c0d7-b277-4fd0-bbad-ef59cc51905b",
          "httpRequestId": "faea4f7c-b84e-42fe-8c42-7b31f7d8c707"
        },
        "item": {
          "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06576ca8-2611-4eee-949e-f261a3893db6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e19971bd-cadf-4fc1-8d8e-09a56235d5d8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"jondoe\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "c98c9149-f525-48aa-8e10-abe4b6e8fba7",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "328afbb8-2775-46cd-bdeb-9fc18adbc058",
          "httpRequestId": "81804e79-4d35-4090-98d8-d590407bb639"
        },
        "item": {
          "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06576ca8-2611-4eee-949e-f261a3893db6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7f44858-7c9a-4796-96c4-bc39482af6c4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "97fc5a4b-5a01-4e76-b01d-daceefb45f1c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-9gct9LADoJNgy7HIqJfw7o4OAwU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              123,
              92,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              92,
              34,
              58,
              92,
              34,
              117,
              115,
              101,
              114,
              49,
              92,
              34,
              44,
              92,
              34,
              104,
              97,
              115,
              104,
              92,
              34,
              58,
              92,
              34,
              77,
              106,
              65,
              121,
              78,
              83,
              48,
              119,
              78,
              83,
              48,
              122,
              77,
              86,
              81,
              120,
              77,
              106,
              111,
              48,
              78,
              122,
              111,
              48,
              77,
              108,
              111,
              61,
              92,
              34,
              44,
              92,
              34,
              118,
              97,
              108,
              105,
              100,
              65,
              116,
              92,
              34,
              58,
              92,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              51,
              49,
              84,
              49,
              50,
              58,
              52,
              55,
              58,
              52,
              50,
              90,
              92,
              34,
              125,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 144
        },
        "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is Login successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4de880ea-d0e3-4e7b-8cfa-0e14b4525724",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12b6e6ea-3ceb-4847-89fb-c9ddc9aad310"
        },
        "item": {
          "id": "2330c71a-069d-4503-88b3-83d48179bc69",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "15abba42-66bd-49f0-b855-00a2577d7d24",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "32493a50-f7c0-482b-bc98-42231b686b5c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8af2eabd-963e-4635-aee3-0e0f2909948b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "83077fff-62b1-4c0b-9c08-b9608a0e419d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "null"
              },
              {
                "key": "page",
                "value": "null"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91971a80-d560-4b12-8166-5aadbf8f278c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d23872cb-25bc-47e6-9e62-f3120ef915b4",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-CONoFlj4crUzHzQ/hQVCK5FqZM4\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 20
        },
        "id": "2330c71a-069d-4503-88b3-83d48179bc69",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token 'I' at 1:1\nInvalid country code\n^",
              "checksum": "a8f49e263ad6766fd36ad7ad31e4bd02",
              "id": "cef0bbc8-59c4-4103-99b4-1b5936c4ec30",
              "timestamp": 1748695542340,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "fd061b0a-2dc7-40c4-80ec-2e5ad444a2e0",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "aad7d11a-f728-4f3c-9e13-cd8464569bd1"
        },
        "item": {
          "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "597efb10-cdef-4e59-80a0-f207ce3afe80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fbc5b8eb-4ee8-40a2-b14c-dca4c83cd9f9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8cd84387-67cc-497e-bb92-b19bc3cb7608",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "bfb41815-7651-4914-a96e-80a222be541f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8299bb13-6465-446b-aa7a-2b4801ca652d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fa23e4c9-5c49-44d0-82ed-cc455d2c1911",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 28
        },
        "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Message is Player not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "413450bf-8d1f-467d-99ea-77105cb2feaf",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "b1c00e72-9fbc-4fc6-8364-dcd0517dd7bf"
        },
        "item": {
          "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "597efb10-cdef-4e59-80a0-f207ce3afe80",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "fbc5b8eb-4ee8-40a2-b14c-dca4c83cd9f9"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8cd84387-67cc-497e-bb92-b19bc3cb7608",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "bfb41815-7651-4914-a96e-80a222be541f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "df77015a-4527-4650-913e-2fd4729f033a"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e4c0da41-b300-4d26-9793-afd2625c2afe",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "48266bfd-a1c4-4bdd-b0a8-f3ec22b5cc50",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "163"
            },
            {
              "key": "ETag",
              "value": "W/\"a3-X6SgfL4ACXucGO10N3VK+h28gzA\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              55,
              55,
              48,
              49,
              53,
              97,
              45,
              52,
              53,
              50,
              55,
              45,
              52,
              54,
              53,
              48,
              45,
              57,
              49,
              51,
              101,
              45,
              50,
              102,
              100,
              52,
              55,
              50,
              57,
              102,
              48,
              51,
              51,
              97,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              100,
              105,
              99,
              101,
              52,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              121,
              109,
              111,
              110,
              100,
              46,
              99,
              111,
              108,
              108,
              105,
              110,
              115,
              55,
              49,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              48,
              45,
              49,
              49,
              45,
              49,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              57,
              53,
              46,
              57,
              54,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              75,
              82,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 163
        },
        "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fa239319-3402-457e-81e5-76a90b57d7e3",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "24b25bda-4307-489d-82d3-27b2bbcf0315"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "381d35e6-162d-4938-b561-f7f9af45c2fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "89a9bb88-cc68-4d79-bd44-ec55e8e9db66",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "343ab1a0-65fb-4dc1-8e78-2bf35f4c3862",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "7c4f1eda-d131-4850-b902-b8f515d89a76"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {}{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "39ea5887-9db0-4e43-aed2-6f97fe5eee93",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "bfe6b0c7-9161-41dc-8af9-9081ddd13f3d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0041d75c-9717-4888-85ba-5e9f549aaf6e",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0b7dc571-1af5-4fdc-886b-6e5406cd66bf"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf05bebb-5bc2-4aec-aa9d-cfc2f1443c30",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "613a616a-d246-4a7c-b490-6e565efaa1a7",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-qeX1O6o8DzDHKvaBbkoAq19nEEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 28
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f4a222ef-448d-4dea-9982-ad93b9085215",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3cbd5405-7803-461c-a4d5-dece11da8c63"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a79a5ca7-f3de-4761-90df-72b53fc2c93b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "95c3df42-e092-4b6a-a777-eda7b56dfe78",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-ZXxU9PuyF+UpUGdndifSZ6AtgHo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b8f59c4d-36a9-402c-bd76-5f3b1608e854",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f51f7b05-c18f-4761-9885-e9896389406f"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "56ff2101-b093-4f92-ba0d-81a29d055eb1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "113",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "0045efb3-2157-4895-9e23-70c3aa61e92c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-vNY7RilGMrC5/vB4il5a/uRHX0s\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              105,
              114,
              116,
              104,
              32,
              100,
              97,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9dcb1963-214a-460c-8b70-88cd3d40a857",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe6146bd-198d-48a9-a5f5-dc1604c50280"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bd205b79-c244-4af3-811f-046e065b28f5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3c5b8af2-523b-4579-a37c-6a3164c77380",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 20
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "015ccec5-b496-4642-ada8-263e2ad0a051",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3450ef80-5c4f-4b1c-a29a-0193306079f1"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ef4a66f1-c6db-47ea-976a-ca251725128a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3dc0da20-16cb-413a-b65a-d1ab2ab1e3a2",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd8d9d2b-1ecb-4cb0-9ee3-20f8ea8a5afb",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4edac520-1144-4f7b-8983-e4fb2cfcf803"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fccdf8a5-1e1f-484a-a21b-44bc053870d8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "120",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 0,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "5fb8a937-af3a-4964-8fa6-df4286f2df11",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 42
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a0540bb-2cc8-4f43-b3d1-f1877cf7bc15",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "680f05ea-7963-4da5-b7f3-a3855861eedd"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75879eee-8dd9-42c4-844a-36b07798f276",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": -50,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "eea5e1d6-ddad-4bdf-91df-7dc4a076df46",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 42
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5b5b93bb-8b76-495e-a597-cdf909b3638b",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "98c92251-ab16-4f61-8451-1669621471e3"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e63f8f19-d56d-4208-ac65-3cf621f6fa4b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "121",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a00aeae0-9310-4b40-a5b2-059be9b316e2",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3eb19a50-049c-4861-b25f-a705b9e1c0dc",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6d9e67d9-cd73-4773-b852-9360631599aa"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "17aa47e7-5748-4346-95f0-4b77242342f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "127",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"ASDASD\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "24b737ca-d0cb-48a3-88f7-e5603249e343",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "62a26b3b-3a50-4107-aa6b-e3fe0b7c9aa0",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c2b1b233-e8da-4b53-bcd0-43f663bb8aeb"
        },
        "item": {
          "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "090f474a-7ac4-4884-827b-c20a0cd5b557",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "fd9024e7-f664-4d38-bfa3-14ce5521b284",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "146"
            },
            {
              "key": "ETag",
              "value": "W/\"92-q0WFgpTpVf/5orJyrNSee5BYPbU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              100,
              111,
              101,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              49,
              50,
              53,
              102,
              57,
              51,
              52,
              45,
              55,
              49,
              54,
              102,
              45,
              52,
              56,
              98,
              56,
              45,
              56,
              52,
              97,
              97,
              45,
              48,
              50,
              56,
              57,
              53,
              55,
              50,
              53,
              56,
              50,
              50,
              52,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 146
        },
        "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "855670e9-b2f0-44e2-b766-b3a1d2a42eca",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "759e2f53-cb3d-4a5b-b471-86dba729cf1b"
        },
        "item": {
          "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ed38632-f193-4a0b-9d3d-67fcb079da7f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "4a69958b-76df-4efe-9ce1-4d7e39032dbe",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0910532e-d308-4ebb-b0a9-20bb1e61f658",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "f00c1635-bf04-49f1-b257-c8df4c9f395c"
        },
        "item": {
          "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f247eced-0b2f-429b-8585-1cb971acec00",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "dfc5347d-5aea-4f19-8720-b8212ed9cb2c",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a3f119b-9421-431b-8d16-8bbf2c836df8",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "a231587d-95c1-4ff8-9c87-d17a95bedfbe"
        },
        "item": {
          "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "d125f934-716f-48b8-84aa-028957258224"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bcac2de8-2c50-4489-ba3a-be7a57acce73",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "71fdc718-56b7-4dd1-b8e2-cb13000fa8e2",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f556468e-5369-47fe-80b5-018aca148dbe",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "41c6c3e6-6122-43da-8d74-3616b89d10a6"
        },
        "item": {
          "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxMjo0Nzo0Mlo=\",\"validAt\":\"2025-05-31T12:47:42Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5a4172a7-fbcb-4a6e-b501-efa5afa81206",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "f12dd6ed-0a7e-4177-8126-03a459475f6a",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "09b817f4-ef77-4cdf-aba0-400777ea02da",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "1ad5447f-445d-42ce-9f31-2fe23c37ba1d"
        },
        "item": {
          "id": "7dc31fc9-200a-4f31-b63c-79933d805da4",
          "name": "GET stats",
          "request": {
            "url": {
              "path": [
                "api",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e7128656-14ad-4c52-87ec-1a257bd804a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response keys are valid\", function () {",
                  "    Object.keys(pm.response.json()).forEach(key => {",
                  "        pm.expect(key.length).to.eql(2);",
                  "        pm.expect(key.toUpperCase()).to.eql(key);",
                  "    })",
                  "});"
                ],
                "_lastExecutionId": "67d35204-431f-4e5a-8747-da5d18489007"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da324b1d-3897-4598-91b3-ce7f092dd1d9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6d04893d-eb03-4e74-955b-4023e27c53cd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "113"
            },
            {
              "key": "ETag",
              "value": "W/\"71-psExknJVFK4CoX3xwAuOvO5fRTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              66,
              82,
              34,
              58,
              54,
              44,
              34,
              65,
              85,
              34,
              58,
              57,
              44,
              34,
              85,
              83,
              34,
              58,
              54,
              44,
              34,
              73,
              78,
              34,
              58,
              57,
              44,
              34,
              72,
              85,
              34,
              58,
              51,
              44,
              34,
              67,
              79,
              34,
              58,
              55,
              44,
              34,
              75,
              82,
              34,
              58,
              56,
              44,
              34,
              72,
              75,
              34,
              58,
              57,
              44,
              34,
              74,
              80,
              34,
              58,
              56,
              44,
              34,
              70,
              82,
              34,
              58,
              51,
              44,
              34,
              83,
              71,
              34,
              58,
              55,
              44,
              34,
              71,
              66,
              34,
              58,
              53,
              44,
              34,
              67,
              65,
              34,
              58,
              53,
              44,
              34,
              67,
              78,
              34,
              58,
              55,
              44,
              34,
              77,
              79,
              34,
              58,
              51,
              44,
              34,
              68,
              69,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 113
        },
        "id": "7dc31fc9-200a-4f31-b63c-79933d805da4",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response keys are valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6539403a-1121-4882-87b6-8d6f69e91220",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "385a0045-2bca-4672-80bb-6d03ba2987fe"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AcAs"
              },
              {
                "key": "board",
                "value": "AhKhQhJhTh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d77178c4-e45c-4da3-95ad-975694e042c8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d761a0eb-3819-449f-8772-a3fd0907bea5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "abba30e0-02cd-434b-9f83-72c570620a23",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "74b7a88e-7ea7-478c-b636-9fb073271bd8"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KhQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "178f7fe5-d20e-4f4d-859a-b803c0476c11",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8afcba90-88e8-4a72-8e2e-e794c7e21238",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "132cf7b5-cea2-4af0-b1d4-b4bf646e1515",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1b6f42d1-0768-4be1-b0a1-af8cfa32fdbf"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3sQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b06440a9-58d6-4755-bd1f-006cdabe666a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7536228f-fa40-4d79-87ba-448447bb5e34",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 19
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "603a880f-04cb-4426-b0a1-18b950a84039",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1c92cb49-0994-4a24-a6cd-fd0e135b2587"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s5h"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "54e50620-b2c4-4eab-8bc0-e56a2e851ff5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a926e799-7003-4a40-b3a6-7a35cab8651b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0025635e-10b2-436a-aa57-3584efd1d4b7",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8592cef5-99af-4632-864d-b964fddf3224"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "51271d70-d079-4bbe-88d3-fe0ad0fe4d82",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b094cfde-12c1-4d7d-9c38-14b1b8addf33",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e372e75b-25b9-4c7a-93ff-cbd8eb294bbb",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d738de2b-8dd4-454d-b198-1f6817729eba"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4d"
              },
              {
                "key": "board",
                "value": "Ah5d6c9s7s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04f33d57-54d8-4a4c-a099-8b199c9d782d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "47c440d9-60c2-4935-b05c-bacb14773a24",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6b9d483e-e7b6-4c5f-a282-efa71e5cbfe1",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cec8b6ad-41c7-4d8c-b82e-06ccb01af0a6"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h4h"
              },
              {
                "key": "board",
                "value": "Ah5h6c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cdd677bf-9c45-4591-bd62-79ec292161e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "99c0a687-d829-4749-b319-e950e4730eed",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ba8f1a0a-c627-4f80-90c9-d76ce5c3f835",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "10b0d20f-842e-415a-b4ad-926db6d4344a"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h3s"
              },
              {
                "key": "board",
                "value": "3c4h4c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b17e2ab8-f374-46e4-9276-20ff31a6deb4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f4985cc2-c67a-489e-a98f-eb68a6949926",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dcbacc2a-bc4c-43e8-8339-2a7da7842962",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "89d18a4c-6afc-4325-a2c3-a88e60c24efb"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h3c6c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b570d075-f79a-4746-a874-f0e05ea2fd21",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7abf1f93-a5f7-4ca0-9c8d-2e8cf285f59c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "53e4abff-08ef-44c6-bad9-5d28e1140c08",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2fe5882e-49cb-43d3-9d92-5c726be45dca"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4s"
              },
              {
                "key": "board",
                "value": "5s6s7s9sTs"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0833f92e-17fd-4c1b-a23e-ba9f6dfb12e3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8a3d7d59-00e2-4fd0-9f23-b9a7ee5a2a3a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d9ac1041-979d-4983-ba63-b3facbe182b6",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "042ed6e9-4ffe-43e5-93aa-bf72ed5e8a88"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "As4s"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2ca12675-0a12-4e94-abe9-6a24c322cc5f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "344838d0-9db1-42e1-aebe-cb63b7350785",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c2d8f47f-281a-4653-ad45-1c7c75bf5f7d",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9d6b5a85-dccc-4e66-95d7-ff1b90a735ee"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsAs"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3de0d045-e908-4be9-814f-9c73a7c867f3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cf2c30a6-d91e-4607-956d-c9cc1cf91251",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6bd4a08d-faaa-411e-8a3e-10d40090ffd6",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8d92d957-eee5-468d-8907-d028c4fe903d"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42c47e96-b05d-4367-9462-da9420ef93ee",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3aa76c1a-c818-48d6-a277-b6141ade8694",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "03913011-4a13-4195-8996-516feeef5e83",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "07b47efb-3163-4fef-8fef-dc86e458289d"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8a728bef-3099-4f8c-809a-d2b20fe885e0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e4918666-9835-4a06-a38b-13be8c9fc792",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "806a8af2-d7e9-4b96-9128-583cc62c2b0c",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "bc4c3ce6-db41-4f74-8cce-0fd8f940fbbf"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "ASDAA"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3d29b7cf-48c5-4e38-bbeb-047a02a788a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9e151278-ed7d-4557-ae8a-a994b68bf823",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9c8c68a1-94cf-4b0d-8455-1bae9da1cb55",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "de69034f-a464-41fa-a3c6-d47e2d50397c"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "1234"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "304b71e0-64c2-47c9-a19d-bc43f8dd30ae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6dd968d9-3e31-41ca-9e60-4b518fc6b78b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "30fbd63f-058e-4ed7-aee6-65630dfdbdb3",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "447d80e9-6f92-4071-b88e-b4f97ac48e2d"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "774b05e9-9191-4d5b-8150-1d6f2a00753d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4df567c6-7941-4c57-bd0c-e43ff08abfbd",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fea55fe6-a74d-4ac3-9bbc-3ef342641398",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0b9ec9ec-ed12-412b-a6d3-f5d857151ee6"
        },
        "item": {
          "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": ""
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3587f359-6a29-4e6f-ad45-b2fb78ab9484",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9c004ce0-5fca-42b1-aa7a-3232061efb73",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c16d1c9b-e0bc-48c7-ab0c-e5f581577d68",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "897e9531-f564-4ccd-90f0-324026cd5df6"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QhJh9d2c"
              },
              {
                "key": "board",
                "value": "AhKhTh8h2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8523e965-1011-4257-a78a-411b12e2b7e5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a23b559d-f958-4868-bb68-409f11a92294",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0ee3a736-897e-44b0-9753-20e19d892ddf",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a2b5ae6e-e906-426a-a14c-c75f2659db14"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9h8h7h6d"
              },
              {
                "key": "board",
                "value": "ThJhQh2c3d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12573f5d-cc48-434f-8969-020a7b9d8405",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d4f0f271-9980-467d-bb72-7c82c741764d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0bae72d5-44c8-4780-ae4b-dd7e4c11f16e",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7ecdc122-c1b6-43be-9b73-d1a17879c3b9"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "7s7c2d3h"
              },
              {
                "key": "board",
                "value": "7d7hQdKs5s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9b37fdbe-0583-4d56-bab0-00d5992c3b30",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dd862af2-7098-414d-8958-8956492699ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5ccbd3ea-bed1-4362-9a1e-35d2c688899f",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0e8c053f-fb9b-43a7-af92-519070665669"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AdAh9s9c"
              },
              {
                "key": "board",
                "value": "Ac8dQs8s3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42d921b2-587c-453a-9ae7-ad91229dc887",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e756caaa-b66c-492a-a528-36234fc7ae70",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:42 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2e3728a3-5a7d-4177-a168-3c3725e719f5",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4c472f2d-67ab-4892-a126-1b1d0c061bb6"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "5h6h9c2d"
              },
              {
                "key": "board",
                "value": "AhKhTh8h3h"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "506f586d-2b36-41a9-b5dc-925cda1c8a8a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "edfde9a3-3bec-417b-9bcf-4092c8468ed0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "37d44c7e-3bfc-429a-9a99-d1005cff0651",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "025444e1-caa2-47d3-b10b-b979f686b4db"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9d8c7h2s"
              },
              {
                "key": "board",
                "value": "6s5cThJcQd"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e91a37d3-af7e-40e9-8df2-9e66345e0253",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dcdefa73-e638-418e-a132-6f9b96d86d81",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "38ed03cd-ea76-424e-9e13-2f282d050062",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6ee7b75d-f64e-4013-bdf1-25438be4588a"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QcQs3d7s"
              },
              {
                "key": "board",
                "value": "Qh9h2c5d7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f10d9a9c-9a61-40e8-b73c-c479e9fd826c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a146c03c-ea38-44f5-b149-b1b000836b3d",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3829a49c-958b-41a0-b133-3b3d0ccf95e1",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e7cf2afb-1769-43e9-883e-b9cd495c050a"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsKd3c2h"
              },
              {
                "key": "board",
                "value": "AhKc4d7s8c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "445df00a-d250-402e-a4a4-6e3edc65208a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "25b08ca0-8869-4fed-9e70-7902b6d2e435",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4a21737a-ed77-452b-bf74-6b8c1324ec42",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "0c9609cb-de94-4e26-b45e-204eb550a771"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "6c7d3s2h"
              },
              {
                "key": "board",
                "value": "AhKhTdJd3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8c0fd23f-3ef6-4d42-a808-636bfcfcd722",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4308e982-5b4f-41d5-8125-69ae52ce40c1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 19
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cdec381a-8177-4917-b568-9bc799b54579",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8e71be45-7dc6-4788-92cb-7e389ca2342e"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d5s9cJd"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "01615d4e-6c19-4431-a6d3-9f3621674599",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a931cbd7-20f4-4175-8544-78570fd79a8b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9652daae-780a-4f86-8f8d-b7489abadf7d",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "25594c2a-058b-4c8a-9342-e6648743082b"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dc0d60d7-07ff-479f-bba7-53d9ef35914b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cb517f08-797f-4ae3-8468-7027f54d2626",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "89d09141-2931-41a1-b9f4-bfe48addaeff",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6eddbf3f-3e7f-4fc2-aab2-74f5fcc2e95d"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "2s3s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e896db28-bbd7-4877-b170-409a3b5a8c43",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "41cc9074-1684-4b90-836a-166bc7082397",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "2dd7cbe4-62f1-41a9-8197-fd4dae4b4e50",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7de10445-a24d-464f-9b76-ca92e9e5d14d"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "null"
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91484fd1-c59b-489d-b6c1-3ea670c0f532",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9bf7d2ef-ac8b-4fac-98c2-e7d6b2c1c713",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "65207331-ff23-4ae4-900e-b02cc8ba9da1",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f35107af-090b-4473-9c66-37421f369459"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "12345678"
              },
              {
                "key": "board",
                "value": "2d3d4d5d6d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d53b0b55-9e55-49af-8c95-9967ae25dd24",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3560309b-4af7-4492-b348-9d3d3433e6b4",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e844ae55-3507-433f-9380-e9474e0b2b86",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "733ce2a7-50ad-4460-b283-0131d2265c64"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "515ccc30-6f01-4567-bb00-c07d650e1752",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "74b17504-0485-4bbc-abd3-20d678f64abb",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f72d00a3-62d8-4f7b-a374-d76ad53f321b",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80a080dd-9d3a-4b0e-84a5-75204e5dbeca"
        },
        "item": {
          "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d2d2d2d"
              },
              {
                "key": "board",
                "value": "2d2d2d2d2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "78026dbc-411e-492d-af38-71e21a5ccecc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "14887e4d-c476-4a38-94db-27a2a5f4544c",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b8b66cf-d568-4929-8504-6bd0808c62c1",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "663edc74-670a-47bb-9d55-8151f0ec6747"
        },
        "item": {
          "id": "fbd61f52-2c4c-475f-a167-51bf2c4bd594",
          "name": "GET coverage",
          "request": {
            "url": {
              "path": [
                "api",
                "coverage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a74445a9-60fa-478b-b67b-016217c10e2e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c59f2142-0f37-43bc-b61c-d2db1e96be77"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "8080",
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "95fa7c7d-367c-4ba4-81b4-3b9992b77a6f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:8080",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dc365e92-1712-499f-88cf-d720af213a68",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "6763"
            },
            {
              "key": "ETag",
              "value": "W/\"1a6b-0bTkKnNj18vRa/tHHrw6dQwlVA4\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 12:45:43 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              51,
              46,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              54,
              54,
              46,
              54,
              55,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              57,
              55,
              46,
              51,
              55,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              51,
              56,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              93,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              125,
              44,
              34,
              116,
              101,
              115,
              116,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 6763
        },
        "id": "fbd61f52-2c4c-475f-a167-51bf2c4bd594"
      }
    ],
    "transfers": {
      "responseTotal": 8802
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token 'I' at 1:1\nInvalid country code\n^",
          "checksum": "a8f49e263ad6766fd36ad7ad31e4bd02",
          "id": "cef0bbc8-59c4-4103-99b4-1b5936c4ec30",
          "timestamp": 1748695542340,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2330c71a-069d-4503-88b3-83d48179bc69",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "15abba42-66bd-49f0-b855-00a2577d7d24",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "32493a50-f7c0-482b-bc98-42231b686b5c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8af2eabd-963e-4635-aee3-0e0f2909948b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "83077fff-62b1-4c0b-9c08-b9608a0e419d"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "be17fd6a-2f88-45fd-b95b-3ad7582753a6",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "06576ca8-2611-4eee-949e-f261a3893db6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "1b28cab9-d3df-4c4c-a4ae-657c847d8598"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5213914e-4b9a-46ce-91ec-87ea54eb62c2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "d12c8093-069a-4cf6-bfa4-59ea87267025"
                  }
                }
              ]
            },
            {
              "id": "2330c71a-069d-4503-88b3-83d48179bc69",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "15abba42-66bd-49f0-b855-00a2577d7d24",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "32493a50-f7c0-482b-bc98-42231b686b5c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8af2eabd-963e-4635-aee3-0e0f2909948b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "83077fff-62b1-4c0b-9c08-b9608a0e419d"
                  }
                }
              ]
            },
            {
              "id": "49455546-2be1-44a2-9c7e-55b05ec0b0ec",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "597efb10-cdef-4e59-80a0-f207ce3afe80",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "fbc5b8eb-4ee8-40a2-b14c-dca4c83cd9f9"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8cd84387-67cc-497e-bb92-b19bc3cb7608",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "bfb41815-7651-4914-a96e-80a222be541f"
                  }
                }
              ]
            },
            {
              "id": "d764a07a-fac6-4ef9-a531-b5c40b1d4747",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "60689ee8-78d6-42f0-8f90-40e700718176",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "25d50e8b-8a16-4884-ad5a-4c064f938a26"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "6c3e8960-3e3a-46b9-bbed-811c43c59557",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "43ab948d-4df1-4ed4-b700-793deff7a9d2"
                  }
                }
              ]
            },
            {
              "id": "f26f9ade-6179-4d0f-998b-30478d7dd197",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "e1484b75-22ce-47b4-a5ca-37753655b6fd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "c8e91c32-5d57-464a-a63d-f9f86fea0414"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "d7453478-2669-4d2a-91f4-ad3f0bb264fa",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "32fbc035-cd29-492c-82d8-0598f289b5fc"
                  }
                }
              ]
            },
            {
              "id": "7dc31fc9-200a-4f31-b63c-79933d805da4",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e7128656-14ad-4c52-87ec-1a257bd804a6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "67d35204-431f-4e5a-8747-da5d18489007"
                  }
                }
              ]
            },
            {
              "id": "bcd667ee-5e8c-430c-8501-9557fe438c2f",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "1aae4450-1b4f-4ef3-b40e-217decb13537",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "b705414c-328c-47e4-bafd-79458ff70ccc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "4ded527c-16c7-4d38-8414-b9d8dabddbc3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "ae0a973b-027d-4475-856d-293356ca1e7e"
                  }
                }
              ]
            },
            {
              "id": "9bfe816b-cb3a-4425-bec1-b3c0170933fc",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "86fb9a56-47a6-47f1-bc99-9c8353739c8a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8050a13e-71a9-488c-91da-929c76ea98c6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "ea712827-9c6c-411a-8913-add562ff8ca6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "92ba83ef-134e-4c7c-acbc-598d515e377c"
                  }
                }
              ]
            },
            {
              "id": "fbd61f52-2c4c-475f-a167-51bf2c4bd594",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a74445a9-60fa-478b-b67b-016217c10e2e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "c59f2142-0f37-43bc-b61c-d2db1e96be77"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c5fe9797-872f-441e-be88-3bc7a2a5a39c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d9fc60e0-55d7-425e-bbf2-46cb2cec99d1"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1da8a743-f138-48f1-ab89-5708830b9f78",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "a947940b-02a3-4876-aae4-05e475ff0e06"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:8080",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "4de880ea-d0e3-4e7b-8cfa-0e14b4525724",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "12b6e6ea-3ceb-4847-89fb-c9ddc9aad310",
          "scriptId": "8af2eabd-963e-4635-aee3-0e0f2909948b"
        }
      }
    ],
    "error": null
  }
}