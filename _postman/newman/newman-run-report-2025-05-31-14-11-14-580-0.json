{
  "collection": {
    "_": {
      "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "exporter_id": "30174363"
    },
    "item": [
      {
        "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
        "name": "POST login",
        "request": {
          "url": {
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "7c64a232-564a-4722-b573-0e3745302e7c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                "});",
                "",
                "pm.environment.set(\"token\", response.token);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: null,",
                "        password: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Username and password are required\",",
                "    },",
                "    {",
                "        username: \"user10\",",
                "        password: \"password\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"jondoe\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"123456\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"Login successful\",",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    console.log(\"All test cases done.\");",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
            }
          }
        ]
      },
      {
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "name": "GET players",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "limit",
                "value": "{{limit}}"
              },
              {
                "key": "page",
                "value": "{{page}}"
              },
              {
                "key": "country",
                "value": "{{country}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        limit: null,",
                "        page: null,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 2,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 0,",
                "        page: -1,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"HU\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"ASDASD\",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined,",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
            }
          }
        ]
      },
      {
        "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
        "name": "GET player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: 1,",
                "        expectedStatus: 404,",
                "        expectedMessage: \"Player not found\",",
                "    },",
                "    {",
                "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "26c53920-1bc2-4986-9677-027720209a33",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
            }
          }
        ]
      },
      {
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "name": "POST player",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"What \",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer {}\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 0,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: -50,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"ASDASD\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 201,",
                "        expectedMessage: undefined",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "pm.environment.set(\"playerId\", response.id);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
            }
          }
        ]
      },
      {
        "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
        "name": "DELETE player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"What X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 204,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    if (currentCase.id === undefined) {",
                "        currentCase.id = pm.environment.get(\"playerId\");",
                "    }",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.code === 204 ? null : pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
            }
          }
        ]
      },
      {
        "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
        "name": "GET stats",
        "request": {
          "url": {
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "75f38650-57f3-43c7-b006-e9e0274345bd",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response keys are valid\", function () {",
                "    Object.keys(pm.response.json()).forEach(key => {",
                "        pm.expect(key.length).to.eql(2);",
                "        pm.expect(key.toUpperCase()).to.eql(key);",
                "    })",
                "});"
              ],
              "_lastExecutionId": "9dc1a278-3201-4c84-82d8-75b95cb96de2"
            }
          }
        ]
      },
      {
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "name": "GET evaluate texas",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        hand: \"AcAs\",",
                "        board: \"AhKhQhJhTh\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"KhQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"high card\"",
                "    },",
                "    {",
                "        hand: \"3sQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"pair\"",
                "    },",
                "    {",
                "        hand: \"3s5h\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"two pair\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"three of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4d\",",
                "        board: \"Ah5d6c9s7s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight\"",
                "    },",
                "    {",
                "        hand: \"3h4h\",",
                "        board: \"Ah5h6c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"flush\"",
                "    },",
                "    {",
                "        hand: \"3h3s\",",
                "        board: \"3c4h4c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"full house\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h3c6c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"four of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4s\",",
                "        board: \"5s6s7s9sTs\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight flush\"",
                "    },",
                "    {",
                "        hand: \"As4s\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"AsAs\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 500,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"ASDAA\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"1234\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"1234567890\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: undefined,",
                "        board: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
            }
          }
        ]
      },
      {
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "name": "GET evaluate omaha",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        \"hand\": \"QhJh9d2c\",",
                "        \"board\": \"AhKhTh8h2d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"royal flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9h8h7h6d\",",
                "        \"board\": \"ThJhQh2c3d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight flush\"",
                "    },",
                "    {",
                "        \"hand\": \"7s7c2d3h\",",
                "        \"board\": \"7d7hQdKs5s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"four of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AdAh9s9c\",",
                "        \"board\": \"Ac8dQs8s3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"full house\"",
                "    },",
                "    {",
                "        \"hand\": \"5h6h9c2d\",",
                "        \"board\": \"AhKhTh8h3h\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9d8c7h2s\",",
                "        \"board\": \"6s5cThJcQd\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight\"",
                "    },",
                "    {",
                "        \"hand\": \"QcQs3d7s\",",
                "        \"board\": \"Qh9h2c5d7d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"three of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AsKd3c2h\",",
                "        \"board\": \"AhKc4d7s8c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"two pair\"",
                "    },",
                "    {",
                "        \"hand\": \"6c7d3s2h\",",
                "        \"board\": \"AhKhTdJd3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"pair\"",
                "    },",
                "    {",
                "        \"hand\": \"2d5s9cJd\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"high card\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"2s3s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": null,",
                "        \"board\": undefined,",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"12345678\",",
                "        \"board\": \"2d3d4d5d6d\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"1234567890\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d2d2d2d\",",
                "        \"board\": \"2d2d2d2d2d\",",
                "        \"expectedStatus\": 500,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
            }
          }
        ]
      },
      {
        "id": "ad8a033b-4883-49c3-bce6-abb7733ce549",
        "name": "GET coverage",
        "request": {
          "url": {
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "1c334401-f1dd-42f4-a7cd-b580bbaf5348",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "2b8f30a7-9f10-4d9e-a72f-063d9cb14654"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "f5264c24-bfb7-4e47-b250-e10f4f59085f",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "089d17c2-872e-4228-b342-36c297a2ea53"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "09758072-5590-4aa9-a5ca-26f77aa34523",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "8bd74de7-0eef-4847-ad5a-a75930d1d39f"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:2345",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "name": "_Poker API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "41d97c8a-e308-46b4-98b5-b8d257e3ad15",
    "values": [
      {
        "type": "any",
        "value": "{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}",
        "key": "token"
      },
      {
        "type": "any",
        "value": "67320960-830d-4e3b-a109-eb00e1647ad8",
        "key": "playerId"
      }
    ]
  },
  "globals": {
    "id": "6630eba7-b690-4d05-8c57-6be1d16d3642",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 254,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 64,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 103,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 128,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 126,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2.015624999999999,
      "responseMin": 1,
      "responseMax": 27,
      "responseSd": 3.2039633049357787,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748700673525,
      "completed": 1748700674575
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "42b8683c-199c-44f8-99a6-33fae486f23d",
          "httpRequestId": "41a0cbb1-af70-49ca-8324-ee51887f847c"
        },
        "item": {
          "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b4699e38-5b88-4f64-9024-3361b3185372",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "46",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"null\",\n    \"password\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "308a2334-2f78-4914-ae9b-772f8ef783f8",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "46"
            },
            {
              "key": "ETag",
              "value": "W/\"2e-/Dk6jMda4g9eGLLFdPKg+jiG/7M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 27,
          "responseSize": 46
        },
        "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Username and password are required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c9303c19-b767-4b82-86ea-fe8df93a67fe",
          "httpRequestId": "ddb5764d-d314-4928-b0e0-087aa829388a"
        },
        "item": {
          "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c2a5a841-8e60-402b-87ed-91ebeb5362b9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "56",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user10\",\n    \"password\": \"password\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "4ebe08b4-aba9-4e9f-ab95-2f0ff7ae74d0",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 24
        },
        "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a7d83581-aea2-435a-bed3-bafa483a2014",
          "httpRequestId": "7b577298-9132-4ba2-84f1-2726f44c425c"
        },
        "item": {
          "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3ee46a0-3274-4f08-bde1-21b41dff979b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"jondoe\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b4c7ebf9-e87b-4130-88de-48946a64162a",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "669412a5-5fb8-487e-95a1-c89f1e6ad5c4",
          "httpRequestId": "da5c1a21-6ae6-41fd-ab62-257b42f42fc5"
        },
        "item": {
          "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b9109a70-4959-40b2-bf84-4761961c8c6f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "7e74ee23-0506-4c6a-bd28-9a97ba5f1f35",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-xkNajEEnkElQw8Y1uhywueHCwBc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              123,
              92,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              92,
              34,
              58,
              92,
              34,
              117,
              115,
              101,
              114,
              49,
              92,
              34,
              44,
              92,
              34,
              104,
              97,
              115,
              104,
              92,
              34,
              58,
              92,
              34,
              77,
              106,
              65,
              121,
              78,
              83,
              48,
              119,
              78,
              83,
              48,
              122,
              77,
              86,
              81,
              120,
              78,
              68,
              111,
              120,
              77,
              122,
              111,
              120,
              77,
              49,
              111,
              61,
              92,
              34,
              44,
              92,
              34,
              118,
              97,
              108,
              105,
              100,
              65,
              116,
              92,
              34,
              58,
              92,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              49,
              51,
              58,
              49,
              51,
              90,
              92,
              34,
              125,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 144
        },
        "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is Login successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e56c68d5-5d47-4dc2-9f74-05a797ec1f4b",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "3d8ca30c-17a1-4952-ac4d-626aa003551b"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "null"
              },
              {
                "key": "page",
                "value": "null"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "42a1a742-9a63-4855-9425-a3f9488a882f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "3039f738-ae8a-47f0-9be4-7ba96bb7df8b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3f2e4f6e-abb3-41b1-9906-35eba4d6b4fb",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c22eca62-510e-4e38-8ced-7b62364ce5df"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4b37bb0d-1f6b-4925-ac83-30b219f7b633",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "feed7af2-3093-4285-ac54-bbf0f9ad8b94",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6639d0a3-f214-4aa5-8003-867117f66fcc",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "07dfba2c-04c2-48b5-b5b6-9fb918196147"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "2"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9fe9f87a-83ee-4b80-8acf-05b7d41e0b4d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "86c464a1-1024-488b-8854-57839d0d04ed",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7e56dd41-4420-4769-bbc2-a677eb17a4b8",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c01c1f6a-87ee-489f-92d0-daab3df82d04"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "0"
              },
              {
                "key": "page",
                "value": "-1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "62f846a0-2da8-40b7-b16e-19846df61be8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "55d3c58e-5852-479f-a7c9-bd52cd0b0eb6",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 32
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9a8958ce-30ee-41b3-a33e-b96de644aa2a",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "a117e473-8534-4370-87d7-141b97d5c35f"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "HU"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fc08369d-5f20-4f4e-a1e3-791877c5f38b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "718bdba5-b315-4b99-96ef-abd410926fae",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "486"
            },
            {
              "key": "ETag",
              "value": "W/\"1e6-+B8jZJHJc0eIaNf28rYBy/b0E8I\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              102,
              53,
              55,
              48,
              48,
              97,
              56,
              45,
              54,
              52,
              52,
              50,
              45,
              52,
              102,
              102,
              57,
              45,
              57,
              102,
              55,
              101,
              45,
              54,
              49,
              56,
              48,
              102,
              100,
              50,
              51,
              52,
              49,
              50,
              101,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              118,
              97,
              54,
              50,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              108,
              105,
              115,
              101,
              111,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              45,
              109,
              101,
              100,
              104,
              117,
              114,
              115,
              116,
              48,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              53,
              49,
              45,
              48,
              49,
              45,
              49,
              55,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              54,
              53,
              51,
              50,
              46,
              53,
              56,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              99,
              51,
              97,
              100,
              53,
              49,
              53,
              45,
              54,
              55,
              53,
              51,
              45,
              52,
              51,
              102,
              100,
              45,
              57,
              52,
              55,
              52,
              45,
              98,
              54,
              54,
              48,
              100,
              51,
              52,
              50,
              57,
              54,
              98,
              54,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              97,
              110,
              100,
              105,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              107,
              97,
              116,
              101,
              108,
              121,
              110,
              51,
              53,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              54,
              45,
              48,
              49,
              45,
              49,
              53,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              51,
              48,
              51,
              49,
              46,
              52,
              55,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              50,
              101,
              102,
              49,
              99,
              101,
              51,
              45,
              97,
              97,
              53,
              56,
              45,
              52,
              98,
              52,
              53,
              45,
              97,
              50,
              56,
              48,
              45,
              99,
              51,
              51,
              56,
              99,
              102,
              97,
              102,
              54,
              54,
              97,
              98,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              110,
              105,
              100,
              50,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              105,
              111,
              118,
              97,
              110,
              110,
              121,
              46,
              119,
              101,
              115,
              116,
              54,
              64,
              104,
              111,
              116,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              54,
              55,
              45,
              48,
              56,
              45,
              50,
              51,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              56,
              49,
              49,
              46,
              57,
              57,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 486
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fd4fd306-c49d-432b-8635-bd5e1d557896",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7db11793-100d-4ae5-96ce-0cb9bf753d23"
        },
        "item": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "ASDASD"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "af7c70ab-70fb-457b-b6c1-ace8dc74cbbe",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "61358a39-f2a0-40df-8a85-47ba3e333b8b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 400",
              "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a695f195-d9d1-4304-95d4-26db2fc54fde",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f5a14ac7-c0cd-4d34-8fbd-75b2855072b2"
        },
        "item": {
          "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "26c53920-1bc2-4986-9677-027720209a33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2344f60f-84b9-4241-8ed1-888cb768248c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "77c977bc-ac17-49e6-bd60-f66f77ecf587",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 28
        },
        "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Message is Player not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1aa98011-3ab5-4421-b516-1b76a7b8078a",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "e38b3a4a-1d66-4b25-a0c2-fa70343625b9"
        },
        "item": {
          "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "26c53920-1bc2-4986-9677-027720209a33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "df77015a-4527-4650-913e-2fd4729f033a"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "31cfa3cd-3181-42c8-8bb0-af317b196179",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6cf2a16d-d37c-4a9b-a4c8-effefe6bfd32",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "163"
            },
            {
              "key": "ETag",
              "value": "W/\"a3-X6SgfL4ACXucGO10N3VK+h28gzA\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              55,
              55,
              48,
              49,
              53,
              97,
              45,
              52,
              53,
              50,
              55,
              45,
              52,
              54,
              53,
              48,
              45,
              57,
              49,
              51,
              101,
              45,
              50,
              102,
              100,
              52,
              55,
              50,
              57,
              102,
              48,
              51,
              51,
              97,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              100,
              105,
              99,
              101,
              52,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              121,
              109,
              111,
              110,
              100,
              46,
              99,
              111,
              108,
              108,
              105,
              110,
              115,
              55,
              49,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              48,
              45,
              49,
              49,
              45,
              49,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              57,
              53,
              46,
              57,
              54,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              75,
              82,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 163
        },
        "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0c216964-99e3-4be3-87b3-1476a7f9e4cc",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "3f2f0ba6-93ed-4ecc-80ca-75ef05f59374"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9373ede-07cd-4648-93c9-f5f75458f05d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6747a724-6bcb-4183-8576-6ccd20c815f9",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 25
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b96f337e-eb7f-4c46-818d-0beefca709da",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "d44191d0-4160-46de-817d-bf8c4a711acc"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {}{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a0d279b9-bc6b-42a4-ae41-5668384a3752",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "26aeaa68-0d0e-4d99-ac32-799b74a37a35",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "438ac256-ba1f-4597-b4d3-7a876ed5b783",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "19a4ffd2-6dea-4f56-8733-e0ddad74396f"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "db992608-aff1-42b9-8b35-c8535a71c658",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f8da2a5a-797f-41d5-a4b4-b3c9dc4d24e3",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-qeX1O6o8DzDHKvaBbkoAq19nEEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1a005c7-0c4c-45f9-b34f-4662cffc0652",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "4ca0781b-1a19-4c8d-bf97-1531384ad55d"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ae590385-74df-439f-8dc7-d3c7cb17a5f9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "88fe8da8-c955-4d7a-8ef2-ba5fc6e343c8",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-ZXxU9PuyF+UpUGdndifSZ6AtgHo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5e998d6a-d14c-456a-a9e6-d9599f524477",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ebb31abf-3272-4f18-917d-39672e0436d1"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3152e2b6-17df-406b-a7d6-d2b029723456",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "113",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "b60bf12a-d9db-4720-9b1f-4cea57aee50f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-vNY7RilGMrC5/vB4il5a/uRHX0s\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              105,
              114,
              116,
              104,
              32,
              100,
              97,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "52c7681a-56af-462f-bb69-4edd067237db",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "aa9c608b-5eda-432e-8204-06006a8e2af2"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3fe8131e-03bb-47f7-a876-1e7c642c08f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "91177a7d-c613-4b69-af76-a153239e7a99",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e2c14744-b064-4cae-84cd-e50395324e40",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9773d391-3de3-4145-bc92-8523c3728ca0"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "381b879f-7ac1-4b38-b923-ec2be4a5e632",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "cccdc793-3a01-4548-9a54-49847bdfd687",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7482415c-a881-48a5-bba6-0f1b8a70f5a1",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "fe1e5fdf-02c6-4e62-8bac-ee064c6b9fa4"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c9896756-7f54-4138-a74f-48e640a84364",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "120",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 0,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "6214dad5-385d-4813-878a-6f6413cd7a03",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 42
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "934d3971-29db-4889-b75e-0dccf7b4245a",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "910a9af5-7296-4919-9a17-326b5ba9e129"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c102bf6b-8f4f-49fa-afe6-29e2031fae4a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": -50,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "60cb8b28-453d-423f-80f4-000e9893f84c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 42
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "be8b7ca0-4ed8-4126-8e09-83b29b4c93db",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "6907cfd4-552d-4705-9eb6-142cef0a29aa"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4d011369-f7d4-4c5b-b822-60265d589c2b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "121",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "a7b17b1f-9574-479f-9b83-deca9c8f0446",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad973f34-fd37-4914-b981-2638fb01cc98",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c9d743f3-5f9d-45e8-9971-8346774299ad"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4c33ff09-e3b5-4c22-a31e-aa7e3c6bbeae",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "127",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"ASDASD\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "17f85623-1c4c-4d19-a43b-3d4a76cc723d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "111493ad-6506-40dc-8751-5c13663e4968",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a23fa53e-8010-431d-bbf3-8d5ec4f1fdad"
        },
        "item": {
          "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b96b6369-ec24-4fe2-8a0a-7094fdf5b142",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ee0af5b3-c356-45a5-92bb-7ed4bbc64d3a",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "146"
            },
            {
              "key": "ETag",
              "value": "W/\"92-kVAAV6QI4VhgsJRNVxwRTmdaehA\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              100,
              111,
              101,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              55,
              51,
              50,
              48,
              57,
              54,
              48,
              45,
              56,
              51,
              48,
              100,
              45,
              52,
              101,
              51,
              98,
              45,
              97,
              49,
              48,
              57,
              45,
              101,
              98,
              48,
              48,
              101,
              49,
              54,
              52,
              55,
              97,
              100,
              56,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 146
        },
        "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1b1f646-9564-45c0-875d-00853f050f63",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "9b18b290-1cf4-4234-8f5b-a1a28ce48bc3"
        },
        "item": {
          "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c48134f-c7c1-47c2-b119-137ad0245803",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "f888ddea-6f10-491f-b69c-3cafb9150044",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:13 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9e436c76-b423-4384-8028-a469832eabad",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "659105ae-d332-46e9-9749-b54e076c0560"
        },
        "item": {
          "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "081667a6-8a19-45bb-a02d-0a8792013a57",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "0167d308-901b-43c0-ac65-042aa56605cd",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bfb74ca0-7129-421e-b703-0d389ead43c5",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "99bb5b79-5b9f-4091-b7c8-239a067eaa14"
        },
        "item": {
          "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "67320960-830d-4e3b-a109-eb00e1647ad8"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5cda455a-f4b5-4db7-8cf6-2d26e3fed2b2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "e1fa71af-1292-473d-a4e2-ad0eeb5b2769",
          "status": "No Content",
          "code": 204,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "ETag",
              "value": "W/\"2d-jyJ0OXU6JRKZVjZsdedEfNYtKu8\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": []
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 0
        },
        "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
        "assertions": [
          {
            "assertion": "Status code is 204",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4d12359b-6045-4b03-9c08-c6d92771dde9",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "bf4c1b2d-27ea-4288-afec-6294f49e66af"
        },
        "item": {
          "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMzoxM1o=\",\"validAt\":\"2025-05-31T14:13:13Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e5b9e5e4-6843-4deb-81e1-21e5ff08768e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "69df19de-3e1d-4847-b3eb-8c3a557e0f2e",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a0f944e5-6a2a-4154-b65f-c8a1f91dd351",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6ef25359-05f4-482e-baed-ea575d31b477"
        },
        "item": {
          "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
          "name": "GET stats",
          "request": {
            "url": {
              "path": [
                "api",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "75f38650-57f3-43c7-b006-e9e0274345bd",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response keys are valid\", function () {",
                  "    Object.keys(pm.response.json()).forEach(key => {",
                  "        pm.expect(key.length).to.eql(2);",
                  "        pm.expect(key.toUpperCase()).to.eql(key);",
                  "    })",
                  "});"
                ],
                "_lastExecutionId": "9dc1a278-3201-4c84-82d8-75b95cb96de2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0781c7e7-39c2-4566-a2bd-6f46b770b207",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "90f26068-86ea-4efc-a8d2-0b0b41f4d4f5",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "113"
            },
            {
              "key": "ETag",
              "value": "W/\"71-psExknJVFK4CoX3xwAuOvO5fRTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              66,
              82,
              34,
              58,
              54,
              44,
              34,
              65,
              85,
              34,
              58,
              57,
              44,
              34,
              85,
              83,
              34,
              58,
              54,
              44,
              34,
              73,
              78,
              34,
              58,
              57,
              44,
              34,
              72,
              85,
              34,
              58,
              51,
              44,
              34,
              67,
              79,
              34,
              58,
              55,
              44,
              34,
              75,
              82,
              34,
              58,
              56,
              44,
              34,
              72,
              75,
              34,
              58,
              57,
              44,
              34,
              74,
              80,
              34,
              58,
              56,
              44,
              34,
              70,
              82,
              34,
              58,
              51,
              44,
              34,
              83,
              71,
              34,
              58,
              55,
              44,
              34,
              71,
              66,
              34,
              58,
              53,
              44,
              34,
              67,
              65,
              34,
              58,
              53,
              44,
              34,
              67,
              78,
              34,
              58,
              55,
              44,
              34,
              77,
              79,
              34,
              58,
              51,
              44,
              34,
              68,
              69,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 113
        },
        "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response keys are valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "228efbe0-6d12-4fdf-b641-95498e25525a",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0f9d976d-8937-412f-92af-cdab1808cd56"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AcAs"
              },
              {
                "key": "board",
                "value": "AhKhQhJhTh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "19f1805d-e9a6-4d2f-bea0-cfcf684ab672",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1f30acd9-8b60-4fcf-915a-ec9717b4b7ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f933fbdf-c795-4db3-900e-81440df9f727",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "53a6b492-2d1e-470c-a61e-541f1c2d009d"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KhQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "949a2a99-2004-401d-ab18-c8738c515ae0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "95862fb5-394d-4b0c-aefa-a2d949dd13cd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3ef2c5d-b744-4160-bac1-a9d30cea28d8",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "66e1a32d-c244-4130-9e26-208f0475459c"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3sQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "34204a83-4f13-45ec-a542-fcb832c9f52c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1261407f-d347-48c8-b663-90a9d1168a5b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 19
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "04ed29a6-3b0d-4f2e-af72-acbedf90a2db",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "104c1269-7254-4160-a65b-c0ca0136e13e"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s5h"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4261899e-a372-4141-835a-e9d37d7e42c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0f428c06-0352-4bb6-a150-9177c4fc66d2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ae324578-7d8b-42e6-9235-c00f6cba085d",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e28a3833-5f1f-44e8-a3c8-f2759522712c"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02daec4b-0b6a-4173-b214-8b9d1882f9f2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "88467a25-8d10-4820-8da8-0eab9468113c",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3811ffa-3f9b-4a6b-bc3c-54ceadb112e7",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "8d974efb-3799-4c5e-9f6b-b157ebf135f8"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4d"
              },
              {
                "key": "board",
                "value": "Ah5d6c9s7s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6908d5fd-4a4b-4193-8a71-a42636f530fc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7a686a25-f43a-4356-b71e-254b4b4b4757",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f6e57914-00c1-42d7-88b9-3695e093d511",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "50e40eaf-3b9c-4a4e-8986-60816e78d202"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h4h"
              },
              {
                "key": "board",
                "value": "Ah5h6c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "12569f83-0b8d-4c3e-9eff-b9ee1d425b53",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ff7f1faf-2b13-4e25-90ba-a53dd601e3b7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "dc9533ff-d7e9-4322-903e-5c27c2bbde87",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "0fc3ea81-97db-4c00-8c87-eee11786afec"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h3s"
              },
              {
                "key": "board",
                "value": "3c4h4c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "30cbb3d1-d676-42ed-9eb7-707e0aaaad11",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "44e5aa46-9b39-47a4-87cd-6a1f6029a716",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "79d64e94-1d2b-4d41-9d95-3fc2e59485b0",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6f28dae3-115f-4a66-a79c-022ad28f4c16"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h3c6c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c8a18bbc-e5b3-4444-988c-06c82755f7b7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9c9771c9-1e17-40da-a19c-c553e0dd5b76",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9c569cd-c1f6-436d-aa89-20989dbb520a",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "89303046-cddd-42da-91c7-7a7e1aae39ba"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4s"
              },
              {
                "key": "board",
                "value": "5s6s7s9sTs"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60a18994-5b14-433d-8884-360c3d127eab",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d8a06c6f-30ad-4935-aaed-04cfec82d971",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1b02e170-81f2-42f3-ba0a-68fdb1509795",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a77c94ac-f168-4359-b9ae-6f5a6444c216"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "As4s"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc6c078a-442d-42a2-b78e-d8b1b60a6bd3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ae844965-24ed-48ba-9e5d-3f66e4d357be",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7306e45d-a10e-49e0-b21a-a24f5b21ada5",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "ae2d7108-c31c-4dbe-9c8d-0998b2616ca5"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsAs"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a69c7a19-da03-4748-a790-a97592ab7615",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0fb0021f-d02e-452b-bdbf-58c92231cfc1",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8def560b-2048-4a85-a3f8-d7ffacf01082",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fdc14086-3f36-4f4f-a34e-f7f07923609f"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7e66fb0b-9169-4db2-9337-1fc885239a98",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9425ed5f-fee8-45a0-b151-7f2fff769537",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "953aa027-d914-4240-91aa-b27c6b87d0a7",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fec27eee-dd32-49a9-8a32-fc273c2bb37b"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "734f734f-4785-420d-96e3-c30daba8b4d1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e0116b6e-befb-4e32-8fe0-309a03c9b938",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a2a82618-a169-46d6-8bc4-e4261899ff55",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "070d74c7-2ddc-4ed5-a183-df3d12193969"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "ASDAA"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3316fe76-1e8d-4f3a-aaae-698f366edaf4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7991803b-91e9-45a7-b2f0-299eb5380931",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c4ad7a93-f214-4420-a6d5-a4e8be8a4225",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "422a0227-9ea8-4cef-a0e8-4f5df1384e2f"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "1234"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "90d21a0b-ab22-452a-8aab-45f33699fd70",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1ec2e038-0263-4d72-bc47-6d032e9a534c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "75e91d1c-2944-45a8-8fd9-83f01506193e",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4de7efdf-a8c7-4ed4-b8ad-a02ae047cd64"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6749d891-164b-4dac-8aaa-b612b4e6ddb4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5255dcc1-8b90-4286-baa8-6b3504781f7e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e04e0528-24a4-4464-940e-ab2be058f942",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "953f8ca5-f2e5-424a-a1b1-88101482c73f"
        },
        "item": {
          "id": "d061af53-080d-407b-b020-5bc094b3a166",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": ""
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0108937c-4ee6-442a-8ca0-c186a7310e17",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f46b5058-547d-4d50-adcc-9eb791277850",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "d061af53-080d-407b-b020-5bc094b3a166",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3ff51cd3-2022-45f1-b6c6-673f4b6b79da",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "80007850-ecb8-49d0-a25d-d43f6eae1d15"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QhJh9d2c"
              },
              {
                "key": "board",
                "value": "AhKhTh8h2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f99c4976-ab1a-468c-8fe6-170705f37e7d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e93d081d-ab06-4b89-91a5-3597c669cfb3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4f2b8630-be23-4149-86ee-153d7ff04457",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "11a9bd20-7da1-42c5-a1b5-dbb3264bb40a"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9h8h7h6d"
              },
              {
                "key": "board",
                "value": "ThJhQh2c3d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5796bcac-8606-493d-9479-f1962e1abc10",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "36d68b72-9cff-4253-a9c7-11e1d5f33421",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "88fac373-ff22-4b7c-9dda-f9ae2c34e3c1",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f09c7179-0990-4e7c-a773-2b3c49e1c27a"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "7s7c2d3h"
              },
              {
                "key": "board",
                "value": "7d7hQdKs5s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e7817512-1324-46fb-a1d3-ad36082b4806",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1b7a65a5-cae4-482c-89e8-48f4c1749095",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d4b43616-2d1d-4918-8c04-6c5374c7555b",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "da424e54-9f1c-4a96-af2f-0df6803b827d"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AdAh9s9c"
              },
              {
                "key": "board",
                "value": "Ac8dQs8s3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5ab1ebc3-c97a-4eb9-b99c-bbfca814fa06",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "577904c1-8f04-45ff-bae0-825ad3c36bfd",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d03efecf-2940-48eb-b047-8b45d1d189db",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1c432c32-a5be-4e16-8227-7acd32011b9a"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "5h6h9c2d"
              },
              {
                "key": "board",
                "value": "AhKhTh8h3h"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "481dc791-4afd-463c-9201-9f8e93c61d2e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0373503f-822a-4433-820e-3064350523d6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "46af8929-d3ec-4230-a406-48468a9c94de",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "54a7fd6d-9453-4e6c-9746-8dab0d59055b"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9d8c7h2s"
              },
              {
                "key": "board",
                "value": "6s5cThJcQd"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c7acb17b-209d-4da7-bc1e-c8eddc225dbc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6daec954-d77f-43f4-84d5-a2a2e8331d43",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7dad4284-633a-4842-a482-82555899f51b",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98264465-2f17-424e-a0c8-9604b939022f"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QcQs3d7s"
              },
              {
                "key": "board",
                "value": "Qh9h2c5d7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c5516bd8-7ada-4840-8676-001b1b715c0c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d76ef97d-b94c-49b1-8c75-2f3d034c9e72",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fa0fc7c9-72b6-4167-ae32-a73656fc5099",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2232075b-263e-4b32-bc4e-963ea5454618"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsKd3c2h"
              },
              {
                "key": "board",
                "value": "AhKc4d7s8c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3bd6a31b-f53c-497d-b7bc-665bebdee2a5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cb5d7412-4e14-48ac-8d01-b7efcd894f9e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "454fe2b0-8e6e-41b9-8729-32390cf1f471",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "99a8bc4b-321a-4f86-a591-64f90175b74b"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "6c7d3s2h"
              },
              {
                "key": "board",
                "value": "AhKhTdJd3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "67b33565-20be-4fb8-a6a6-11463997bc89",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0c32835d-4f78-4f84-948b-f35aaae9d43e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 19
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e4850ac-c9bd-4c1c-9cd9-8988489eff73",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dbdb0dd9-a6c4-4eca-81bd-4b97f93c2b9c"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d5s9cJd"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "15f45d02-7ff7-400b-ad1e-4ed5509c0e2b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7337a9dd-7a0a-4f99-a64f-8d7e2f4932dc",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7de66911-1d98-46d4-8a27-46b44c513a81",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6dbdc20c-4c57-47af-a659-b5e7f7b4a1f2"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8d58098a-07e1-44b8-a4b3-97c3d3e1d6c7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f9166740-7d69-47f7-bf23-1450d180683c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f7ddc25-f628-475d-936b-2b0e1a709266",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8742e59f-6ff6-45a9-a516-9fcecad85719"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "2s3s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8be73a09-3736-4d1b-a040-0d559b4e1b59",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "06a1ff50-0b6a-417f-924d-625cc3cc75ed",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9fb35dbd-00ea-4d88-87a3-2bb57dff33f9",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b0f6e153-79a0-4ac4-bbf1-15fac00d2974"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "null"
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ff11de5-c96b-430e-8bc5-0e2d0d1516df",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "81bba84c-f37b-437d-8ddd-dbe825315629",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9233db46-c772-415d-8dbf-3abdf623d82c",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "69dbeba0-fac4-452b-b27c-341bcaf365db"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "12345678"
              },
              {
                "key": "board",
                "value": "2d3d4d5d6d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa443f86-d05e-4f28-b3f3-67a8b067e13d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ba7b2beb-6746-4d94-a66c-807e35b8ac32",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e82f795d-2c24-49c7-befc-d9e0f2882134",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "7ee3ef67-4845-4347-b5bb-759a02b1739f"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "ce7cbee6-14e2-4570-8e1b-07f0ba15b241",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "2bf0e1fb-44a7-4390-b6a4-4e62084770ff",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a7ade6b4-81b0-4944-b338-60286091ce22",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "feab1194-45f4-4b4c-94a2-286e62f80130"
        },
        "item": {
          "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d2d2d2d"
              },
              {
                "key": "board",
                "value": "2d2d2d2d2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e2df036-a917-4468-94fb-4493cbaa603f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c5319e65-15c2-4409-80af-63c47bab68e2",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "88d6c649-eb9e-49ce-afc6-b9e62096bca6",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "17ae76d4-9ee2-4046-8f2d-5fb330fa7b0b"
        },
        "item": {
          "id": "ad8a033b-4883-49c3-bce6-abb7733ce549",
          "name": "GET coverage",
          "request": {
            "url": {
              "path": [
                "api",
                "coverage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "1c334401-f1dd-42f4-a7cd-b580bbaf5348",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "2b8f30a7-9f10-4d9e-a72f-063d9cb14654"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "18deef90-43c0-426d-8807-d17e33ead1b0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bea6e468-9be5-449d-96fe-e3add02a7cf2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "6700"
            },
            {
              "key": "ETag",
              "value": "W/\"1a2c-nkIAl7KYmH3poPBRgMQNTccu+5M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:11:14 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              53,
              46,
              57,
              50,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              55,
              50,
              46,
              55,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              57,
              55,
              46,
              51,
              55,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              51,
              56,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              93,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              125,
              44,
              34,
              116,
              101,
              115,
              116,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 6700
        },
        "id": "ad8a033b-4883-49c3-bce6-abb7733ce549"
      }
    ],
    "transfers": {
      "responseTotal": 9365
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "7049eabe-3b58-4677-aab6-b1d61a08a813",
          "timestamp": 1748700673677,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
                  }
                }
              ]
            },
            {
              "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
                  }
                }
              ]
            },
            {
              "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "26c53920-1bc2-4986-9677-027720209a33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
                  }
                }
              ]
            },
            {
              "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
                  }
                }
              ]
            },
            {
              "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
                  }
                }
              ]
            },
            {
              "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "75f38650-57f3-43c7-b006-e9e0274345bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "9dc1a278-3201-4c84-82d8-75b95cb96de2"
                  }
                }
              ]
            },
            {
              "id": "d061af53-080d-407b-b020-5bc094b3a166",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
                  }
                }
              ]
            },
            {
              "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
                  }
                }
              ]
            },
            {
              "id": "ad8a033b-4883-49c3-bce6-abb7733ce549",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1c334401-f1dd-42f4-a7cd-b580bbaf5348",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b8f30a7-9f10-4d9e-a72f-063d9cb14654"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f5264c24-bfb7-4e47-b250-e10f4f59085f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "089d17c2-872e-4228-b342-36c297a2ea53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "09758072-5590-4aa9-a5ca-26f77aa34523",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8bd74de7-0eef-4847-ad5a-a75930d1d39f"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "3f2e4f6e-abb3-41b1-9906-35eba4d6b4fb",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c22eca62-510e-4e38-8ced-7b62364ce5df",
          "scriptId": "a047e763-6278-4861-aa4a-a1219ac37fe7",
          "execution": "f1138caf-8968-4482-93b8-9d5e9e264452"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "7370c359-22ee-4195-b852-bffe4dfa6376",
          "timestamp": 1748700673697,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
                  }
                }
              ]
            },
            {
              "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
                  }
                }
              ]
            },
            {
              "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "26c53920-1bc2-4986-9677-027720209a33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
                  }
                }
              ]
            },
            {
              "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
                  }
                }
              ]
            },
            {
              "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
                  }
                }
              ]
            },
            {
              "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "75f38650-57f3-43c7-b006-e9e0274345bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "9dc1a278-3201-4c84-82d8-75b95cb96de2"
                  }
                }
              ]
            },
            {
              "id": "d061af53-080d-407b-b020-5bc094b3a166",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
                  }
                }
              ]
            },
            {
              "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
                  }
                }
              ]
            },
            {
              "id": "ad8a033b-4883-49c3-bce6-abb7733ce549",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1c334401-f1dd-42f4-a7cd-b580bbaf5348",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b8f30a7-9f10-4d9e-a72f-063d9cb14654"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f5264c24-bfb7-4e47-b250-e10f4f59085f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "089d17c2-872e-4228-b342-36c297a2ea53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "09758072-5590-4aa9-a5ca-26f77aa34523",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8bd74de7-0eef-4847-ad5a-a75930d1d39f"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "6639d0a3-f214-4aa5-8003-867117f66fcc",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "07dfba2c-04c2-48b5-b5b6-9fb918196147",
          "scriptId": "a047e763-6278-4861-aa4a-a1219ac37fe7",
          "execution": "69d7aab8-d7dc-4476-9230-3fc93031bf49"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 400",
          "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "2943de630e4d4df5da94e8c1bdee38a3",
          "id": "38f350e8-3179-4f28-a8df-ad4f8b5ba89d",
          "timestamp": 1748700673749,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "9e2af429-3b8e-48dc-b0ae-ee5de89c20fe",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7c64a232-564a-4722-b573-0e3745302e7c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "54857e98-6b2f-4f4f-a077-d1dd4f55e2c4"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ba4f29ba-c4e0-4542-b551-f08176c6202c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "4548b433-1e4f-4ec0-ba9a-fcdc400bdb5c"
                  }
                }
              ]
            },
            {
              "id": "2c67c82c-cb4b-4035-959a-cef0f9e6354e",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "7fc101ad-c002-4478-808e-ee4cabde1cdc",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "3ac91e9f-859e-4883-b2ac-73930b67de1d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "a047e763-6278-4861-aa4a-a1219ac37fe7",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
                  }
                }
              ]
            },
            {
              "id": "95cbf591-8cc9-49ec-8192-27ac3d5868d9",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "ce3aab77-ec4a-443d-af1c-3236e24cf1e8",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bcbd2958-fb2a-42b2-9059-579e9b0046bc"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "26c53920-1bc2-4986-9677-027720209a33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4b78891e-f271-403a-bab0-278627e0c880"
                  }
                }
              ]
            },
            {
              "id": "fb228313-fd5b-4837-a454-bbf35676f19b",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "d4aa1821-1d94-4063-a758-50c0da327b33",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "1c6f7520-ee72-493a-a5a5-68efcf602795"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "e47f38b7-15bc-4962-8648-82b5c3e5daf1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "8837dfdc-337e-4d3e-932c-a381cfc881b4"
                  }
                }
              ]
            },
            {
              "id": "b9dce7a5-ec00-4e48-899f-09255e1a998d",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "c8e7f7c6-9170-4d94-8358-82648a25efa6",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "46f43324-f975-45d4-b669-78d56b2088d6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2c894a62-6640-49bc-80cd-9b8ec6665aa4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "921398ca-6898-4e28-922f-3d59ab3ecc53"
                  }
                }
              ]
            },
            {
              "id": "d734ca86-39ee-4dc7-b260-74aa57c65505",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "75f38650-57f3-43c7-b006-e9e0274345bd",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "9dc1a278-3201-4c84-82d8-75b95cb96de2"
                  }
                }
              ]
            },
            {
              "id": "d061af53-080d-407b-b020-5bc094b3a166",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2db42936-475c-4fd1-b303-8ad5adfb6804",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "16d1ce2f-0258-4ec7-a657-2835bdf78088"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "2fb6c273-b928-4e2a-b60f-cbaf287ebeb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "4bbc4d69-4901-463b-84f0-c0b29f8cd71d"
                  }
                }
              ]
            },
            {
              "id": "54ec1c2d-d21b-4970-8fcc-21d475ec8995",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "2b7803c7-7833-4c35-a256-98f56dd85128",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8b200cc6-63bb-4e6d-883f-fe77c963ca0a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f6bf8947-d6a5-40f2-bf03-db2e392fadb2",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f5d61222-cad8-48a1-bc10-8621d42906fa"
                  }
                }
              ]
            },
            {
              "id": "ad8a033b-4883-49c3-bce6-abb7733ce549",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "1c334401-f1dd-42f4-a7cd-b580bbaf5348",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "2b8f30a7-9f10-4d9e-a72f-063d9cb14654"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "f5264c24-bfb7-4e47-b250-e10f4f59085f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "089d17c2-872e-4228-b342-36c297a2ea53"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "09758072-5590-4aa9-a5ca-26f77aa34523",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "8bd74de7-0eef-4847-ad5a-a75930d1d39f"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "fd4fd306-c49d-432b-8635-bd5e1d557896",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "7db11793-100d-4ae5-96ce-0cb9bf753d23",
          "scriptId": "a047e763-6278-4861-aa4a-a1219ac37fe7",
          "execution": "c40fd539-cde6-47fc-9cf8-33a599d9a99c"
        }
      }
    ],
    "error": null
  }
}