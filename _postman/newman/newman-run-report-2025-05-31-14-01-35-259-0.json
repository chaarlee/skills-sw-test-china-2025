{
  "collection": {
    "_": {
      "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "exporter_id": "30174363"
    },
    "item": [
      {
        "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
        "name": "POST login",
        "request": {
          "url": {
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                "});",
                "",
                "pm.environment.set(\"token\", response.token);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: null,",
                "        password: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Username and password are required\",",
                "    },",
                "    {",
                "        username: \"user10\",",
                "        password: \"password\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"jondoe\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"123456\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"Login successful\",",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    console.log(\"All test cases done.\");",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
            }
          }
        ]
      },
      {
        "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
        "name": "GET players",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "limit",
                "value": "{{limit}}"
              },
              {
                "key": "page",
                "value": "{{page}}"
              },
              {
                "key": "country",
                "value": "{{country}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        limit: null,",
                "        page: null,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 2,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 0,",
                "        page: -1,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"HU\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"ASDASD\",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined,",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
            }
          }
        ]
      },
      {
        "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
        "name": "GET player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: 1,",
                "        expectedStatus: 404,",
                "        expectedMessage: \"Player not found\",",
                "    },",
                "    {",
                "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19e6081b-9339-4e25-8943-28a34a15687f",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
            }
          }
        ]
      },
      {
        "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
        "name": "POST player",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"What \",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer {}\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 0,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: -50,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"ASDASD\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 201,",
                "        expectedMessage: undefined",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "pm.environment.set(\"playerId\", response.id);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
            }
          }
        ]
      },
      {
        "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
        "name": "DELETE player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"What X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 204,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    if (currentCase.id === undefined) {",
                "        currentCase.id = pm.environment.get(\"playerId\");",
                "    }",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.code === 204 ? null : pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
            }
          }
        ]
      },
      {
        "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
        "name": "GET stats",
        "request": {
          "url": {
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response keys are valid\", function () {",
                "    Object.keys(pm.response.json()).forEach(key => {",
                "        pm.expect(key.length).to.eql(2);",
                "        pm.expect(key.toUpperCase()).to.eql(key);",
                "    })",
                "});"
              ],
              "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
            }
          }
        ]
      },
      {
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "name": "GET evaluate texas",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        hand: \"AcAs\",",
                "        board: \"AhKhQhJhTh\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"KhQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"high card\"",
                "    },",
                "    {",
                "        hand: \"3sQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"pair\"",
                "    },",
                "    {",
                "        hand: \"3s5h\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"two pair\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"three of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4d\",",
                "        board: \"Ah5d6c9s7s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight\"",
                "    },",
                "    {",
                "        hand: \"3h4h\",",
                "        board: \"Ah5h6c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"flush\"",
                "    },",
                "    {",
                "        hand: \"3h3s\",",
                "        board: \"3c4h4c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"full house\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h3c6c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"four of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4s\",",
                "        board: \"5s6s7s9sTs\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight flush\"",
                "    },",
                "    {",
                "        hand: \"As4s\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"AsAs\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 500,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"ASDAA\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"1234\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"1234567890\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: undefined,",
                "        board: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
            }
          }
        ]
      },
      {
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "name": "GET evaluate omaha",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        \"hand\": \"QhJh9d2c\",",
                "        \"board\": \"AhKhTh8h2d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"royal flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9h8h7h6d\",",
                "        \"board\": \"ThJhQh2c3d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight flush\"",
                "    },",
                "    {",
                "        \"hand\": \"7s7c2d3h\",",
                "        \"board\": \"7d7hQdKs5s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"four of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AdAh9s9c\",",
                "        \"board\": \"Ac8dQs8s3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"full house\"",
                "    },",
                "    {",
                "        \"hand\": \"5h6h9c2d\",",
                "        \"board\": \"AhKhTh8h3h\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9d8c7h2s\",",
                "        \"board\": \"6s5cThJcQd\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight\"",
                "    },",
                "    {",
                "        \"hand\": \"QcQs3d7s\",",
                "        \"board\": \"Qh9h2c5d7d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"three of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AsKd3c2h\",",
                "        \"board\": \"AhKc4d7s8c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"two pair\"",
                "    },",
                "    {",
                "        \"hand\": \"6c7d3s2h\",",
                "        \"board\": \"AhKhTdJd3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"pair\"",
                "    },",
                "    {",
                "        \"hand\": \"2d5s9cJd\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"high card\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"2s3s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": null,",
                "        \"board\": undefined,",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"12345678\",",
                "        \"board\": \"2d3d4d5d6d\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"1234567890\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d2d2d2d\",",
                "        \"board\": \"2d2d2d2d2d\",",
                "        \"expectedStatus\": 500,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
            }
          }
        ]
      },
      {
        "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
        "name": "GET coverage",
        "request": {
          "url": {
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "f214f894-2670-4987-9b22-251c35bf912a",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "82384f90-4bf1-4739-ae92-4d9667b7d443",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "f85cd0ad-822a-4811-bc47-0cc38b395e17"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d9364824-427a-4caf-9e6d-d32ad239e9f5",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "d1f2cfc1-592a-4ab9-b349-ef5f88a826f0"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:2345",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "name": "_Poker API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "60f63978-3a60-4557-8680-7f7cc0b04269",
    "values": [
      {
        "type": "any",
        "value": "{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDowMzozNFo=\",\"validAt\":\"2025-05-31T14:03:34Z\"}",
        "key": "token"
      }
    ]
  },
  "globals": {
    "id": "8125bb30-19c3-4b08-90b7-e1ce8da84f14",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 44,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 174,
        "pending": 0,
        "failed": 4
      },
      "prerequests": {
        "total": 44,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 44,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 44,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 78,
        "pending": 0,
        "failed": 0
      },
      "testScripts": {
        "total": 88,
        "pending": 0,
        "failed": 4
      },
      "prerequestScripts": {
        "total": 86,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 2.0909090909090913,
      "responseMin": 1,
      "responseMax": 16,
      "responseSd": 2.213781029433805,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748700094514,
      "completed": 1748700095255
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "a596b3d0-0877-4cc9-865f-1b08a8ea8809",
          "httpRequestId": "b74bad9b-019d-4859-ad36-a66940e81c65"
        },
        "item": {
          "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fbd083b3-8ed5-4785-8d2c-f07f9dc012dc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "46",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"null\",\n    \"password\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1a9b617f-38cf-43b6-b38c-a276b6081395",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "46"
            },
            {
              "key": "ETag",
              "value": "W/\"2e-/Dk6jMda4g9eGLLFdPKg+jiG/7M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 16,
          "responseSize": 46
        },
        "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Username and password are required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "60492dc7-0c47-4150-a23d-98da524c623a",
          "httpRequestId": "b477c360-c502-4f6b-9ce4-2427f05ba55e"
        },
        "item": {
          "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2710ccda-5c4f-4930-b886-22dc59063282",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "56",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user10\",\n    \"password\": \"password\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "740236de-f902-4fda-88c6-4780f3efc0a3",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "68d2acac-6ab2-4c93-bb8c-a74eb0931619",
          "httpRequestId": "dc481308-8768-40dc-b28f-10512dc94ec8"
        },
        "item": {
          "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c03d707-79d2-4f3b-8382-382474b1d8c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"jondoe\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "3273e13b-ace6-4bfb-be9e-93ef1f08451b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "6a0797c4-34dc-4a94-baa8-d0a8dff6d1b8",
          "httpRequestId": "d5130e49-7986-4080-83e3-f449a763cbbe"
        },
        "item": {
          "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b0869867-1fb9-4e9a-bf34-4fc8d7281800",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "463415fd-297d-4cbe-a5ad-fd1e2c2d2111",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-W708ysCERMCTOdECZ4xh4jApXOc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              123,
              92,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              92,
              34,
              58,
              92,
              34,
              117,
              115,
              101,
              114,
              49,
              92,
              34,
              44,
              92,
              34,
              104,
              97,
              115,
              104,
              92,
              34,
              58,
              92,
              34,
              77,
              106,
              65,
              121,
              78,
              83,
              48,
              119,
              78,
              83,
              48,
              122,
              77,
              86,
              81,
              120,
              78,
              68,
              111,
              119,
              77,
              122,
              111,
              122,
              78,
              70,
              111,
              61,
              92,
              34,
              44,
              92,
              34,
              118,
              97,
              108,
              105,
              100,
              65,
              116,
              92,
              34,
              58,
              92,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              48,
              51,
              58,
              51,
              52,
              90,
              92,
              34,
              125,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 144
        },
        "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is Login successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8065aa45-bbda-41d2-89fa-83eceb1f349c",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "212c1607-6e02-4914-8272-395d984e2a20"
        },
        "item": {
          "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "null"
              },
              {
                "key": "page",
                "value": "null"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0132ec89-705d-4231-9991-ace2113aeff9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a290bbc7-bccc-423d-8c70-91361fedd2aa",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1557"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              110,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              95,
              110,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              55,
              48,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              48,
              49,
              58,
              50,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              53,
              55,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              55,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              49,
              49,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              53,
              58,
              49,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              80,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              56,
              50,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              49,
              58,
              53,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 1557
        },
        "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "4b8b2d03-a9ba-4691-aa5e-c88021c20477",
              "timestamp": 1748700094638,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "39b6cca4-6334-47b5-b61a-58e7c4e1e335",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "07f759ed-b430-4624-8bbb-76e7b5fe0045"
        },
        "item": {
          "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7bc922bc-b97b-4dd9-bb49-d6b2844fa4db",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "67e9dfd3-7e61-4eae-ae26-fb85fcad4c91",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1551"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              110,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              95,
              110,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              55,
              48,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              54,
              54,
              58,
              49,
              54,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              53,
              55,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              55,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              49,
              49,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              53,
              58,
              49,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              48,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              49,
              48,
              58,
              49,
              52,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 1551
        },
        "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "16d4f9bc-1e56-4462-b3ec-f7ef420734c5",
              "timestamp": 1748700094656,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "91a24e20-240f-4c21-bfe9-544eb01c6aa2",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d7f3700-8978-45b4-bd99-3577c8b8a369"
        },
        "item": {
          "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDowMzozNFo=\",\"validAt\":\"2025-05-31T14:03:34Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "46926561-44a3-40ab-9b51-2f290132afce",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "9f210d12-7537-48e6-80f7-ec3f709592af",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1557"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              110,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              95,
              110,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              55,
              48,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              51,
              55,
              53,
              58,
              50,
              51,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              53,
              55,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              55,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              49,
              49,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              53,
              58,
              49,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              80,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              53,
              56,
              50,
              58,
              49,
              50,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              49,
              58,
              53,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 1557
        },
        "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "06f932f3-ad07-4ff9-a104-84f1639fab96",
              "timestamp": 1748700094676,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "ebb7ec52-0d7b-4aec-89f0-5c14f551bc3a",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0aa30488-5001-4537-aacd-5294dba377fb"
        },
        "item": {
          "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDowMzozNFo=\",\"validAt\":\"2025-05-31T14:03:34Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "659e56ef-1736-434e-973b-0dd357a5d65d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "c642fc5f-c9ef-4934-bd21-64ea31bb145c",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1551"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              110,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              95,
              110,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              55,
              48,
              58,
              53,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              50,
              51,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              53,
              55,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              55,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              49,
              49,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              53,
              58,
              49,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              48,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              49,
              48,
              58,
              49,
              52,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 1551
        },
        "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "0bbb082b-2fc7-406d-aee4-bf3451287d47",
              "timestamp": 1748700094693,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "5a4817f0-b013-4ffa-bcf1-a97154d8c2e9",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "13c3d10d-a68b-450f-bc3e-212d2b1b1b6e"
        },
        "item": {
          "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
          "name": "GET stats",
          "request": {
            "url": {
              "path": [
                "api",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response keys are valid\", function () {",
                  "    Object.keys(pm.response.json()).forEach(key => {",
                  "        pm.expect(key.length).to.eql(2);",
                  "        pm.expect(key.toUpperCase()).to.eql(key);",
                  "    })",
                  "});"
                ],
                "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60016297-91c0-4618-bef2-61c3509137e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b3a079fd-4f76-4eaa-bc6f-a575c7f843b3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "113"
            },
            {
              "key": "ETag",
              "value": "W/\"71-psExknJVFK4CoX3xwAuOvO5fRTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              66,
              82,
              34,
              58,
              54,
              44,
              34,
              65,
              85,
              34,
              58,
              57,
              44,
              34,
              85,
              83,
              34,
              58,
              54,
              44,
              34,
              73,
              78,
              34,
              58,
              57,
              44,
              34,
              72,
              85,
              34,
              58,
              51,
              44,
              34,
              67,
              79,
              34,
              58,
              55,
              44,
              34,
              75,
              82,
              34,
              58,
              56,
              44,
              34,
              72,
              75,
              34,
              58,
              57,
              44,
              34,
              74,
              80,
              34,
              58,
              56,
              44,
              34,
              70,
              82,
              34,
              58,
              51,
              44,
              34,
              83,
              71,
              34,
              58,
              55,
              44,
              34,
              71,
              66,
              34,
              58,
              53,
              44,
              34,
              67,
              65,
              34,
              58,
              53,
              44,
              34,
              67,
              78,
              34,
              58,
              55,
              44,
              34,
              77,
              79,
              34,
              58,
              51,
              44,
              34,
              68,
              69,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 113
        },
        "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response keys are valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a1093fd1-6036-43e7-9e51-c200e76d23c7",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "6cbbb3ae-2e5e-4537-b120-b84eb9ead502"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AcAs"
              },
              {
                "key": "board",
                "value": "AhKhQhJhTh"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bcb9db98-84c7-474a-9e75-ac770d445829",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "66adda31-8820-4d5e-beb9-ebf4ef675991",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "90fc8ea0-cef9-4cb6-98a9-319cb5b426dc",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a686d91f-c008-4bb5-8e22-bd81becef00e"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KhQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "20b76492-fd7d-4a78-968f-0d468a6887c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "413ab152-120d-4a1a-b908-29222e65144e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 24
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "690634d5-5da1-44e4-895a-2b5e00a41137",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1c901e00-cd67-4650-8bf6-a8b431e94e4a"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3sQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "06af2b37-eef0-454f-b1b3-2667627d8747",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "309797ec-987c-4bd7-939b-04a0ad6bf9ad",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 19
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c8db1798-a136-4117-9af2-4c86a76ad6b5",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "d5e77c13-c255-4e7c-82bd-24f53d1e9518"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s5h"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0f3b3ecd-b816-49fc-9092-386d0d94951e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9c6c6101-1eaf-4988-bd04-3801d0015564",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f513bf64-70fa-4b27-a779-d9c2176fd806",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3c50ff73-177a-44c5-bb25-9f87fa9430e4"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3bad43a-1719-462a-9688-7b91979e5b0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0f096a3a-9d1c-4f3a-8e3f-3438f807e265",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 4,
          "responseSize": 30
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad7aae44-c19e-4670-b675-113615a92fd9",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1a8b0891-e96c-42d6-94ac-690088ea91a1"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4d"
              },
              {
                "key": "board",
                "value": "Ah5d6c9s7s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "35a02db0-c594-4096-bfdb-c3b4929d2e8f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "fa94dce8-4eb9-47fc-b209-d34a68345460",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "32a2fc75-a9da-4181-95b9-def643f37a12",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "486b424c-a20a-4726-be3b-c8b1c2d2e6d5"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h4h"
              },
              {
                "key": "board",
                "value": "Ah5h6c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f1ab9a61-9562-4aad-8418-7654c0f8b7ad",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "a1da16ae-320b-4406-a524-8655318201b2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e24e3925-8ea2-4661-9088-09e3d91e8e31",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "e5c40d0b-cf2b-4896-9bb3-0fc44f490689"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h3s"
              },
              {
                "key": "board",
                "value": "3c4h4c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "23a17af0-0f8a-43b1-9649-3cfa3a873850",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "50c611ed-7d43-442a-8164-d3872c542cff",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7bb4f791-0432-4318-bd29-231965b651b2",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "022a9d59-32d0-4b89-9f3f-c862df4dac23"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h3c6c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "201c6dbe-654c-4e7d-abb8-0ff2bd696cb0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b643d1e5-2124-4470-b294-18bcf555e36a",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "bd69e3d8-6dac-4091-81ea-566c4e3194dc",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "31e5d449-1985-425f-afa5-e2f6e5659628"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4s"
              },
              {
                "key": "board",
                "value": "5s6s7s9sTs"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1820cfed-bfc3-4dec-b80b-83a2939b4569",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dfff1972-fc5a-47f8-9b81-d93058de0784",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e85a13b5-eba6-493a-a26f-d019d9e11a53",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a34887d5-8bdb-4f28-806a-c71d4d3e2c23"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "As4s"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "570f6ab9-7275-432f-8a38-a6d73d2f4430",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cb966332-cc58-471f-8bc2-34a93a0c7e69",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a54a310a-b194-4f01-a7c2-4dd50f0f4668",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "3c6d869b-3324-4011-97c4-bbb577040a00"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsAs"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9575f777-e13d-4950-ab3b-74071bba0015",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5f965f73-af63-4699-97e3-e7c443aad895",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f9c184b-0245-4138-bc92-19d2f3474d58",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fa0ddd49-0e50-44b6-a6fe-94f62ffdebe1"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "af00efb2-2748-4212-b6ec-ec274f0ceada",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "4229f9e3-7e87-4f0d-8ff3-a86542a474f0",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b460c1f6-53e2-4a7f-9b2c-a60685ebcdf4",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4dc024e5-2f4a-48cb-a264-4f5a47213893"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f9c75499-c848-4adb-85ad-3ae2cc9035ea",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d82541bf-92e6-4bb6-8899-d783acdfd29f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "98b34da7-1a2c-4d6d-9eaa-c8e9cf07413b",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5bb17762-8ba2-4087-84ce-7d1c0c4b24b1"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "ASDAA"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d6e7105e-279d-453d-b205-b3c4a94709e2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d2538d08-1250-4fbb-b98f-3d39060d664b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fc7d80f0-99d4-4f90-8657-a40b3bd13996",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "7564d845-d54e-4179-912a-929340b6e0a1"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "1234"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fb91f7fa-58c3-45ba-bb74-31f11c7ec333",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5096e518-a17f-47d3-ab72-ee2d6c2f9fc8",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ea35f85d-8eb0-4718-a05c-2fc96a00216f",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "49b3c46f-3a49-4af8-9cf4-6bab7cf61e42"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "751cd39f-8b61-48e5-ac63-3d6b7bca681f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "510dfa44-063a-4fd1-932d-ffdcc87173c1",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c579f07f-c856-4168-90f6-485797c568ce",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "744bd586-aa61-4805-93a9-ed02bcb01f26"
        },
        "item": {
          "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": ""
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "87e18e16-3259-4ecb-857c-ff3bfbc16e88",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9e8e5c83-209c-4709-823c-ef24b3518418",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:34 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "8fa3a42e-127b-4833-a653-225e54fb72a5",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "69900e3a-6797-4702-9ca7-e495cd9a4b8e"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QhJh9d2c"
              },
              {
                "key": "board",
                "value": "AhKhTh8h2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "51d545ac-7892-4811-8110-7ecada971b2c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "cff55898-7ed2-4681-b836-b1534093abff",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 26
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "9e4a8135-1107-443b-842a-fba1290d51f0",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4f801b8e-62a8-463f-a6da-d26c2b5977d6"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9h8h7h6d"
              },
              {
                "key": "board",
                "value": "ThJhQh2c3d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9538f1a-427c-454c-a313-c0f4f96e8dbb",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ff6175e0-5373-42cb-bc65-b5609418a7e3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 29
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "f82691db-5f43-45c8-b512-093a291fb472",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ba1591d6-9201-450d-9f08-c677f79ec5bf"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "7s7c2d3h"
              },
              {
                "key": "board",
                "value": "7d7hQdKs5s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "04565617-5140-4e1a-ac44-3ae6437a2cfe",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7dcfca51-3e2f-4afe-bd71-32df755afac4",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "3aca7c5a-7a18-41d0-a9da-5fb092fdff6c",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "98421253-c4d6-4cb8-9e7a-1e8378a4c135"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AdAh9s9c"
              },
              {
                "key": "board",
                "value": "Ac8dQs8s3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e24042ab-9b75-4042-8e4d-82ac9d071de1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "40bd6bfd-afea-48d7-b1c4-cacb6d4885d9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ad1b3d36-c99c-4ac4-9b88-012d35c55144",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "cedd7895-137d-48a5-abac-f4b8e9ed1979"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "5h6h9c2d"
              },
              {
                "key": "board",
                "value": "AhKhTh8h3h"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a38b411b-6ac9-4fe6-9271-3d639cffd8ce",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e8a07958-ae3d-47f3-85b6-7e6a632bb3f1",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "1e81192e-fc10-483c-83ac-c5806a82f88d",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "b9230856-4866-4a06-b354-16de8f529c57"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9d8c7h2s"
              },
              {
                "key": "board",
                "value": "6s5cThJcQd"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "87cb5895-f84d-4052-9a7e-eba8058e9a0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bf8e4936-1de2-4dd5-af33-427c62d15231",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7cff0334-d1c0-4c52-8dc2-9eaf1c786259",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "eda95199-e030-4358-9536-b88d94441419"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QcQs3d7s"
              },
              {
                "key": "board",
                "value": "Qh9h2c5d7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "837c984f-60e6-4aab-a2c3-79b5492ead9b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ae8eb2b0-1425-4d18-8868-f2a05e2829d9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e877ea27-943e-4ee0-ac25-22aa57d31dbd",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "48cfaa3b-a2eb-4e4b-ac48-61c02c4fcf83"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsKd3c2h"
              },
              {
                "key": "board",
                "value": "AhKc4d7s8c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "acf4e9fd-f4fc-488c-9a22-a51127c2e9ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "84e0125f-948a-4910-8de8-2a36727dae29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "67e49108-d89e-4edf-b059-a0a931db35f6",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2f0606f2-0042-4111-9dc9-4b0d874cd023"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "6c7d3s2h"
              },
              {
                "key": "board",
                "value": "AhKhTdJd3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e9b9bc8c-1c69-4404-bf4c-145a12a4b502",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e7baa4e3-1862-47e9-b317-ab8606b4ec55",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 19
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "57a9fb38-6415-4f28-a7df-06e4309ee7e0",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c0281fbd-8f27-41c2-b3b3-b30c884ebbea"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d5s9cJd"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "80b9152e-0669-4cf9-92d6-2996b6bb0ea8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9ca01d4f-74b2-4cfd-b389-e6ec94ff15c7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "08e8b198-1b1b-45e4-ad1f-f1a0a0592660",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "dae6da62-a094-4289-9213-8640461cb30b"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9e8e10db-6276-4157-bf60-75a54168edec",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "09225240-f095-4f2b-a508-fcc391639466",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "48e383fb-8941-461e-9736-453498ed01c7",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "c6565cdc-01ba-4c55-b34d-13088084b6e3"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "2s3s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2bf14fc9-4978-42ac-aa85-ebac0d5948cc",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6a21fe16-4429-434e-94ef-be64a623741a",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "26206914-36b0-42b3-810f-491c1a70b61c",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "4ebd9352-7bd9-427e-8a1e-011c7270f720"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "null"
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "eb8c3644-c8fa-4104-a3f6-12e6377f47d3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "28156ef4-ab39-4800-b6b0-c20fe82bdfcc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "31dba3cd-7df1-42eb-bfe2-7217b8932d1c",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "df8344f9-594a-45ca-aeec-8e233ae8ef52"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "12345678"
              },
              {
                "key": "board",
                "value": "2d3d4d5d6d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "24f228f2-a07b-42c2-aa86-68dfff589f4f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "bc824c2c-0eae-40f6-93d5-dec3e9b1eec8",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "71bd8781-7eae-4573-a079-07b982710f13",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "bfad8fff-85fc-473a-aba4-1d5212ef972d"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91dd1ff5-815c-4ce4-bdb5-2a57db53619f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ca9a9ac8-46d0-4557-9b49-8e80645bbf0b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "cd4d6ca1-1285-4e73-8957-35a7f4942253",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "86056a5f-6ded-4516-b64c-2ce69e23d91b"
        },
        "item": {
          "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d2d2d2d"
              },
              {
                "key": "board",
                "value": "2d2d2d2d2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "da577e40-c3d0-4c01-b715-48b6098baecf",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9deff0cf-f11c-4236-bfda-9698af588b69",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7203a4d9-9b4e-40a9-a889-843ef9be26a8",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "6841e719-904e-4612-979e-a5b1a293b51f"
        },
        "item": {
          "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
          "name": "GET coverage",
          "request": {
            "url": {
              "path": [
                "api",
                "coverage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f214f894-2670-4987-9b22-251c35bf912a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "32ba2591-94df-4549-8f9a-b3a8891a9e8c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "0e62069b-e5cb-467c-add1-9f7be73d1aac",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "7069"
            },
            {
              "key": "ETag",
              "value": "W/\"1b9d-2GMrgyKo0IbWXvW7LQWPSXppczc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:01:35 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              54,
              55,
              46,
              54,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              46,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              57,
              55,
              46,
              51,
              55,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              51,
              56,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              93,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              93,
              125,
              44,
              34,
              116,
              101,
              115,
              116,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 7069
        },
        "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e"
      }
    ],
    "transfers": {
      "responseTotal": 14561
    },
    "failures": [
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "4b8b2d03-a9ba-4691-aa5e-c88021c20477",
          "timestamp": 1748700094638,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
                  }
                }
              ]
            },
            {
              "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
                  }
                }
              ]
            },
            {
              "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
                  }
                }
              ]
            },
            {
              "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
                  }
                }
              ]
            },
            {
              "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
                  }
                }
              ]
            },
            {
              "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
                  }
                }
              ]
            },
            {
              "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
                  }
                }
              ]
            },
            {
              "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
                  }
                }
              ]
            },
            {
              "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f214f894-2670-4987-9b22-251c35bf912a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82384f90-4bf1-4739-ae92-4d9667b7d443",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f85cd0ad-822a-4811-bc47-0cc38b395e17"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9364824-427a-4caf-9e6d-d32ad239e9f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d1f2cfc1-592a-4ab9-b349-ef5f88a826f0"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "8065aa45-bbda-41d2-89fa-83eceb1f349c",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "212c1607-6e02-4914-8272-395d984e2a20",
          "scriptId": "eb28681e-fc9e-405a-bbb7-1309e0f1d660"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "16d4f9bc-1e56-4462-b3ec-f7ef420734c5",
          "timestamp": 1748700094656,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
                  }
                }
              ]
            },
            {
              "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
                  }
                }
              ]
            },
            {
              "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
                  }
                }
              ]
            },
            {
              "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
                  }
                }
              ]
            },
            {
              "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
                  }
                }
              ]
            },
            {
              "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
                  }
                }
              ]
            },
            {
              "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
                  }
                }
              ]
            },
            {
              "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
                  }
                }
              ]
            },
            {
              "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f214f894-2670-4987-9b22-251c35bf912a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82384f90-4bf1-4739-ae92-4d9667b7d443",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f85cd0ad-822a-4811-bc47-0cc38b395e17"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9364824-427a-4caf-9e6d-d32ad239e9f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d1f2cfc1-592a-4ab9-b349-ef5f88a826f0"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "39b6cca4-6334-47b5-b61a-58e7c4e1e335",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "07f759ed-b430-4624-8bbb-76e7b5fe0045",
          "scriptId": "19e6081b-9339-4e25-8943-28a34a15687f"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "06f932f3-ad07-4ff9-a104-84f1639fab96",
          "timestamp": 1748700094676,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
                  }
                }
              ]
            },
            {
              "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
                  }
                }
              ]
            },
            {
              "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
                  }
                }
              ]
            },
            {
              "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
                  }
                }
              ]
            },
            {
              "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
                  }
                }
              ]
            },
            {
              "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
                  }
                }
              ]
            },
            {
              "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
                  }
                }
              ]
            },
            {
              "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
                  }
                }
              ]
            },
            {
              "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f214f894-2670-4987-9b22-251c35bf912a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82384f90-4bf1-4739-ae92-4d9667b7d443",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f85cd0ad-822a-4811-bc47-0cc38b395e17"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9364824-427a-4caf-9e6d-d32ad239e9f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d1f2cfc1-592a-4ab9-b349-ef5f88a826f0"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "91a24e20-240f-4c21-bfe9-544eb01c6aa2",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "9d7f3700-8978-45b4-bd99-3577c8b8a369",
          "scriptId": "b0e92389-4fba-45f2-9054-6ac4a75e4da3"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "0bbb082b-2fc7-406d-aee4-bf3451287d47",
          "timestamp": 1748700094693,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "0359a18e-cbff-4abe-85a0-24dd094936f0",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3d146b4f-d567-442d-8e3c-4abcf1cbc995",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "d04b2d31-e8ad-4c5b-ad9f-1931aa83176c"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b752e496-7620-44e7-8cc7-068b5c8c5743",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "8d97fd31-1a0b-4f85-b8b3-1cb51f37edff"
                  }
                }
              ]
            },
            {
              "id": "69684ab0-0b30-4a67-8c42-186c3ca322b6",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "41a3ec8e-7dd2-4e04-b34e-77bef9780f2f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "0aa26d63-5175-498f-9836-c033d61efc1c"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "eb28681e-fc9e-405a-bbb7-1309e0f1d660",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "1f2c4754-abd5-4f8d-ab9c-36960bb8fc34"
                  }
                }
              ]
            },
            {
              "id": "2e407456-3678-499a-b7e0-5e3b72c3d5b8",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "6201eb8d-1487-44ae-9904-4f90ce7aba60",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e31f321c-7e7a-4de0-be2c-303e79ea75e4"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "19e6081b-9339-4e25-8943-28a34a15687f",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "77a29234-7200-4b26-96a8-d92fa0f0b503"
                  }
                }
              ]
            },
            {
              "id": "7b9ea470-5337-4286-82ed-93c4f3030671",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "a48d060d-e392-41da-bf5c-2413c52268b1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "91ec3aae-4be7-4a28-97a3-a4c71424963d"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "b0e92389-4fba-45f2-9054-6ac4a75e4da3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "70cde617-b27d-4ddf-82eb-ccd30e3a8dcb"
                  }
                }
              ]
            },
            {
              "id": "aa6e9d74-0d28-458a-8a26-75fb42156124",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4cc66c8b-1e2f-4998-98ba-b27b026cad14",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f1b9f85d-fcaf-4170-a085-04372cf59f6b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ede10fe-2645-4a70-9fbf-157909571a5b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "c4082784-9f4e-4461-a474-25bd60bee638"
                  }
                }
              ]
            },
            {
              "id": "76761e74-82cb-4825-9c96-f2502ba9ad49",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "3c8095a4-c230-46d2-9eb5-1aefb5063064",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "5f5ad48b-567d-4d29-9065-8abc5305ec96"
                  }
                }
              ]
            },
            {
              "id": "f954c645-acc1-4cc8-9d10-7a6421288461",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "994ae3f8-9e33-44f9-bdf7-895d21857db4",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e953e71c-a94f-49db-bacd-3a6c61f4451e"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "3c05fbba-2d10-407e-89e0-c4fdd7e86476",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7995c9fc-f8b7-4986-9e24-f27186f274d9"
                  }
                }
              ]
            },
            {
              "id": "84d5849d-d5b0-4f41-b14a-8d17f4b8a18c",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "5f12ed8a-d24b-432a-9664-b47ed41d43ca",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "695a0711-0746-416c-95c3-0c00b39599a8"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "739878ae-f4c8-45b3-af48-e4cf99522749",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "64f6ef3b-f030-4e9a-a83e-5f54064cf1bb"
                  }
                }
              ]
            },
            {
              "id": "94a41742-ffec-4c69-b1f1-ea16173d4d8e",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f214f894-2670-4987-9b22-251c35bf912a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "30903826-0e2b-42ea-bef0-bd7f0e1a99f6"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "82384f90-4bf1-4739-ae92-4d9667b7d443",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "f85cd0ad-822a-4811-bc47-0cc38b395e17"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9364824-427a-4caf-9e6d-d32ad239e9f5",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "d1f2cfc1-592a-4ab9-b349-ef5f88a826f0"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "ebb7ec52-0d7b-4aec-89f0-5c14f551bc3a",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "0aa30488-5001-4537-aacd-5294dba377fb",
          "scriptId": "0ede10fe-2645-4a70-9fbf-157909571a5b"
        }
      }
    ],
    "error": null
  }
}