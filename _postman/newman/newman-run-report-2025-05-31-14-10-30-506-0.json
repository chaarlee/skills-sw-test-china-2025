{
  "collection": {
    "_": {
      "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "exporter_id": "30174363"
    },
    "item": [
      {
        "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
        "name": "POST login",
        "request": {
          "url": {
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                "});",
                "",
                "pm.environment.set(\"token\", response.token);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
            }
          },
          {
            "listen": "prerequest",
            "script": {
              "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: null,",
                "        password: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Username and password are required\",",
                "    },",
                "    {",
                "        username: \"user10\",",
                "        password: \"password\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"jondoe\",",
                "        expectedStatus: 401,",
                "        expectedMessage: \"Unauthorized\",",
                "    },",
                "    {",
                "        username: \"user1\",",
                "        password: \"123456\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"Login successful\",",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    console.log(\"All test cases done.\");",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
            }
          }
        ]
      },
      {
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "name": "GET players",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "limit",
                "value": "{{limit}}"
              },
              {
                "key": "page",
                "value": "{{page}}"
              },
              {
                "key": "country",
                "value": "{{country}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        limit: null,",
                "        page: null,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 2,",
                "        country: null,",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 0,",
                "        page: -1,",
                "        country: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"HU\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    },",
                "    {",
                "        limit: 5,",
                "        page: 1,",
                "        country: \"ASDASD\",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined,",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
            }
          }
        ]
      },
      {
        "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
        "name": "GET player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: 1,",
                "        expectedStatus: 404,",
                "        expectedMessage: \"Player not found\",",
                "    },",
                "    {",
                "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                "        expectedStatus: 200,",
                "        expectedMessage: undefined,",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "});",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
            }
          }
        ]
      },
      {
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "name": "POST player",
        "request": {
          "url": {
            "path": [
              "api",
              "players"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"What \",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer {}\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2024-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 0,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: -50,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"ASDASD\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 400,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        username: \"test\",",
                "        email: \"johndoe@gmail.com\",",
                "        birthDate: \"2000-01-01\",",
                "        balance: 5000,",
                "        country: \"HU\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 201,",
                "        expectedMessage: undefined",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "pm.environment.set(\"playerId\", response.id);",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
            }
          }
        ]
      },
      {
        "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
        "name": "DELETE player",
        "request": {
          "url": {
            "path": [
              "api",
              "players",
              "{{id}}"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "{{testToken}}"
            }
          ],
          "method": "DELETE"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "402b1067-dede-4de6-b2af-8b146988ed61",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"What X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer X\",",
                "        expectedStatus: 401,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 204,",
                "        expectedMessage: undefined",
                "    },",
                "    {",
                "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                "        tokenPrefix: \"Bearer \",",
                "        expectedStatus: 404,",
                "        expectedMessage: undefined",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    if (currentCase.id === undefined) {",
                "        currentCase.id = pm.environment.get(\"playerId\");",
                "    }",
                "",
                "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.code === 204 ? null : pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
            }
          }
        ]
      },
      {
        "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
        "name": "GET stats",
        "request": {
          "url": {
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "pm.test(\"Status code is 200\", function () {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test(\"Response keys are valid\", function () {",
                "    Object.keys(pm.response.json()).forEach(key => {",
                "        pm.expect(key.length).to.eql(2);",
                "        pm.expect(key.toUpperCase()).to.eql(key);",
                "    })",
                "});"
              ],
              "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
            }
          }
        ]
      },
      {
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "name": "GET evaluate texas",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        hand: \"AcAs\",",
                "        board: \"AhKhQhJhTh\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"KhQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"high card\"",
                "    },",
                "    {",
                "        hand: \"3sQh\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"pair\"",
                "    },",
                "    {",
                "        hand: \"3s5h\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"two pair\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h5d7c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"three of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4d\",",
                "        board: \"Ah5d6c9s7s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight\"",
                "    },",
                "    {",
                "        hand: \"3h4h\",",
                "        board: \"Ah5h6c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"flush\"",
                "    },",
                "    {",
                "        hand: \"3h3s\",",
                "        board: \"3c4h4c9h6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"full house\"",
                "    },",
                "    {",
                "        hand: \"3s3d\",",
                "        board: \"3h3c6c9s6s\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"four of a kind\"",
                "    },",
                "    {",
                "        hand: \"3s4s\",",
                "        board: \"5s6s7s9sTs\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"straight flush\"",
                "    },",
                "    {",
                "        hand: \"As4s\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 200,",
                "        expectedMessage: \"royal flush\"",
                "    },",
                "    {",
                "        hand: \"AsAs\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 500,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: null,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"ASD\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"ASDAA\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"1234\",",
                "        board: \"KsQsJsTs5c\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: \"KsQs\",",
                "        board: \"1234567890\",",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "    {",
                "        hand: undefined,",
                "        board: undefined,",
                "        expectedStatus: 400,",
                "        expectedMessage: \"Invalid Texas input\"",
                "    },",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
            }
          }
        ]
      },
      {
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "name": "GET evaluate omaha",
        "request": {
          "url": {
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [
              {
                "key": "hand",
                "value": "{{hand}}"
              },
              {
                "key": "board",
                "value": "{{board}}"
              }
            ],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "const testCases = [",
                "    {",
                "        \"hand\": \"QhJh9d2c\",",
                "        \"board\": \"AhKhTh8h2d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"royal flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9h8h7h6d\",",
                "        \"board\": \"ThJhQh2c3d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight flush\"",
                "    },",
                "    {",
                "        \"hand\": \"7s7c2d3h\",",
                "        \"board\": \"7d7hQdKs5s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"four of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AdAh9s9c\",",
                "        \"board\": \"Ac8dQs8s3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"full house\"",
                "    },",
                "    {",
                "        \"hand\": \"5h6h9c2d\",",
                "        \"board\": \"AhKhTh8h3h\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"flush\"",
                "    },",
                "    {",
                "        \"hand\": \"9d8c7h2s\",",
                "        \"board\": \"6s5cThJcQd\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"straight\"",
                "    },",
                "    {",
                "        \"hand\": \"QcQs3d7s\",",
                "        \"board\": \"Qh9h2c5d7d\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"three of a kind\"",
                "    },",
                "    {",
                "        \"hand\": \"AsKd3c2h\",",
                "        \"board\": \"AhKc4d7s8c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"two pair\"",
                "    },",
                "    {",
                "        \"hand\": \"6c7d3s2h\",",
                "        \"board\": \"AhKhTdJd3c\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"pair\"",
                "    },",
                "    {",
                "        \"hand\": \"2d5s9cJd\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 200,",
                "        \"expectedMessage\": \"high card\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d\",",
                "        \"board\": \"AhQc8h7s4s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"2s3s\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": null,",
                "        \"board\": undefined,",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"12345678\",",
                "        \"board\": \"2d3d4d5d6d\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d3d4d5d\",",
                "        \"board\": \"1234567890\",",
                "        \"expectedStatus\": 400,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    },",
                "    {",
                "        \"hand\": \"2d2d2d2d\",",
                "        \"board\": \"2d2d2d2d2d\",",
                "        \"expectedStatus\": 500,",
                "        \"expectedMessage\": \"Invalid Omaha input\"",
                "    }",
                "];",
                "",
                "pm.variables.set(\"testCaseCount\", testCases.length);",
                "",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "",
                "if (index >= testCases.length) {",
                "    pm.execution.setNextRequest(null);  // Stop running",
                "} else {",
                "    let currentCase = testCases[index];",
                "",
                "    Object.keys(currentCase).forEach(key => {",
                "        pm.variables.set(key, currentCase[key]);",
                "    });",
                "}"
              ],
              "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                "const response = pm.response.json();",
                "",
                "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                "});",
                "",
                "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                "",
                "if (expectedMessage !== undefined) {",
                "    pm.test(\"Message is \" + expectedMessage, function () {",
                "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                "    });",
                "}",
                "",
                "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                "    pm.variables.unset(\"testCaseIndex\");",
                "    pm.variables.unset(\"testCaseCount\");",
                "} else {",
                "    pm.variables.set(\"testCaseIndex\", index);",
                "    pm.execution.setNextRequest(pm.info.requestName);",
                "}"
              ],
              "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
            }
          }
        ]
      },
      {
        "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
        "name": "GET coverage",
        "request": {
          "url": {
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "{{baseUrl}}"
            ],
            "query": [],
            "variable": []
          },
          "method": "GET"
        },
        "response": [],
        "event": [
          {
            "listen": "test",
            "script": {
              "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
              "type": "text/javascript",
              "packages": {},
              "exec": [
                ""
              ],
              "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
            }
          }
        ]
      }
    ],
    "event": [
      {
        "listen": "prerequest",
        "script": {
          "id": "de3d11db-11a8-4159-950d-b2dfda6091a6",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "c0106eb1-c5f5-47d2-a581-ee3ed6cb96dc"
        }
      },
      {
        "listen": "test",
        "script": {
          "id": "d9b54e79-4e00-49b9-9652-7d85a6ce886b",
          "type": "text/javascript",
          "packages": {},
          "exec": [
            ""
          ],
          "_lastExecutionId": "855b4338-e68f-4918-be2c-759f1bf5e9d2"
        }
      }
    ],
    "variable": [
      {
        "type": "string",
        "value": "http://localhost:2345",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
      "name": "_Poker API",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    }
  },
  "environment": {
    "id": "7296e717-aac3-43fc-9285-c5ec989b6f97",
    "values": [
      {
        "type": "any",
        "value": "{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}",
        "key": "token"
      },
      {
        "type": "any",
        "value": "b6eaba6c-b1be-4322-86f7-f697f44519b6",
        "key": "playerId"
      }
    ]
  },
  "globals": {
    "id": "54ad00c5-d21a-4cd8-9b40-3f41f4317481",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 242,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 61,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 97,
        "pending": 0,
        "failed": 3
      },
      "testScripts": {
        "total": 122,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 120,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 1.9508196721311475,
      "responseMin": 1,
      "responseMax": 24,
      "responseSd": 2.9164667007634737,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1748700629472,
      "completed": 1748700630501
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1be17971-69c4-49ca-8887-a91c5c037211",
          "httpRequestId": "5d49c4cd-0d01-4f8a-99f8-78c10694e8ea"
        },
        "item": {
          "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "badbfb6e-5bb1-42db-b261-4401f3488172",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "46",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"null\",\n    \"password\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "adcae0f0-ed03-4bd8-b5ad-360446e5a9ff",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "46"
            },
            {
              "key": "ETag",
              "value": "W/\"2e-/Dk6jMda4g9eGLLFdPKg+jiG/7M\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              32,
              97,
              110,
              100,
              32,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              32,
              97,
              114,
              101,
              32,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 24,
          "responseSize": 46
        },
        "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Username and password are required",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "f09c0326-f041-48ea-8899-18be18a38c6b",
          "httpRequestId": "158c4fcf-50e1-4a26-8db4-47ec999a1759"
        },
        "item": {
          "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9603b001-a8e7-4b36-9a7a-c918caa8ccd5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "56",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user10\",\n    \"password\": \"password\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "7637b445-43a2-4fdf-a668-4b2f7f5e958b",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 24
        },
        "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "72fc9c50-ec01-4b8e-84b6-58b1fd7b37a3",
          "httpRequestId": "3ba711f3-f210-4367-8702-fadb197252c5"
        },
        "item": {
          "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9ad89486-1e7a-428a-bf53-b34dfe96059c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"jondoe\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "964185b6-1539-4d59-99f6-59e8c13ce924",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-XPDV80vbMk4yY1/PADG4jYM4rSI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          },
          {
            "assertion": "Message is Unauthorized",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 9,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "c41de3f1-83a0-492a-a0ae-905430135e40",
          "httpRequestId": "b32413d8-1508-4dbf-bf8e-294507985adf"
        },
        "item": {
          "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
          "name": "POST login",
          "request": {
            "url": {
              "path": [
                "api",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                  "});",
                  "",
                  "pm.environment.set(\"token\", response.token);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: null,",
                  "        password: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Username and password are required\",",
                  "    },",
                  "    {",
                  "        username: \"user10\",",
                  "        password: \"password\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"jondoe\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: \"Unauthorized\",",
                  "    },",
                  "    {",
                  "        username: \"user1\",",
                  "        password: \"123456\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"Login successful\",",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    console.log(\"All test cases done.\");",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "70250108-f482-4841-ac21-fa3c511a7635",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "53",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n    \"username\": \"user1\",\n    \"password\": \"123456\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "f31af877-0ddd-47c7-a6ff-1e533de66732",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "144"
            },
            {
              "key": "ETag",
              "value": "W/\"90-TRkZdxAcGR4mIxFhc5b/KmDa+kY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              109,
              101,
              115,
              115,
              97,
              103,
              101,
              34,
              58,
              34,
              76,
              111,
              103,
              105,
              110,
              32,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              102,
              117,
              108,
              34,
              44,
              34,
              116,
              111,
              107,
              101,
              110,
              34,
              58,
              34,
              123,
              92,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              92,
              34,
              58,
              92,
              34,
              117,
              115,
              101,
              114,
              49,
              92,
              34,
              44,
              92,
              34,
              104,
              97,
              115,
              104,
              92,
              34,
              58,
              92,
              34,
              77,
              106,
              65,
              121,
              78,
              83,
              48,
              119,
              78,
              83,
              48,
              122,
              77,
              86,
              81,
              120,
              78,
              68,
              111,
              120,
              77,
              106,
              111,
              121,
              79,
              86,
              111,
              61,
              92,
              34,
              44,
              92,
              34,
              118,
              97,
              108,
              105,
              100,
              65,
              116,
              92,
              34,
              58,
              92,
              34,
              50,
              48,
              50,
              53,
              45,
              48,
              53,
              45,
              51,
              49,
              84,
              49,
              52,
              58,
              49,
              50,
              58,
              50,
              57,
              90,
              92,
              34,
              125,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 144
        },
        "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is Login successful",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "6f02ecb9-255a-4444-ba5d-bfc48796d6d1",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "018ef8df-53e5-4016-b6a7-de1eea04bf63"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "null"
              },
              {
                "key": "page",
                "value": "null"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "df7e6b94-712f-4873-a1d9-c47c49837a93",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "f276dca6-5e3f-4768-9343-9b3bfaff96cc",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "013ae6e7-05cf-4c6f-b90d-5fc7473caa87",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f45fe10c-5708-4296-87f2-288b743465f6"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b60d1045-ed3b-42b3-afe1-bf99621ae550",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "42a193ce-3795-4015-a4df-1c9fd9aac84d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "db0e60fa-902f-4a67-b935-284ce190a30d",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4554d49c-3bbd-4a25-978f-c9744e75b64b"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "2"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4ef8e784-41cc-4688-a347-33b052ccbfda",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "28c802b2-de9a-4bde-a189-52d5ad00e342",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7a0f735a-4d1a-4c78-b759-ca8b17e04b8a",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "068ea10a-653f-4f69-880c-a103e2546868"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "0"
              },
              {
                "key": "page",
                "value": "-1"
              },
              {
                "key": "country",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a18f8d76-e0fd-4826-95ec-41121872cd0a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "8ba27315-9d85-4cc7-83f9-e8a57ea26831",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "22db82f6-485a-4b89-b8c4-dd2ae1ea7243",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "c79c62cc-3857-4436-9f99-7ee910a1fd13"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "HU"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "91ae5e83-1155-4a9a-913c-f3b7c39c6999",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b022ad93-d852-4061-a90a-d8aeeb4f4063",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "486"
            },
            {
              "key": "ETag",
              "value": "W/\"1e6-+B8jZJHJc0eIaNf28rYBy/b0E8I\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              91,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              48,
              102,
              53,
              55,
              48,
              48,
              97,
              56,
              45,
              54,
              52,
              52,
              50,
              45,
              52,
              102,
              102,
              57,
              45,
              57,
              102,
              55,
              101,
              45,
              54,
              49,
              56,
              48,
              102,
              100,
              50,
              51,
              52,
              49,
              50,
              101,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              65,
              108,
              118,
              97,
              54,
              50,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              101,
              108,
              105,
              115,
              101,
              111,
              46,
              106,
              111,
              104,
              110,
              115,
              111,
              110,
              45,
              109,
              101,
              100,
              104,
              117,
              114,
              115,
              116,
              48,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              53,
              49,
              45,
              48,
              49,
              45,
              49,
              55,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              54,
              53,
              51,
              50,
              46,
              53,
              56,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              99,
              51,
              97,
              100,
              53,
              49,
              53,
              45,
              54,
              55,
              53,
              51,
              45,
              52,
              51,
              102,
              100,
              45,
              57,
              52,
              55,
              52,
              45,
              98,
              54,
              54,
              48,
              100,
              51,
              52,
              50,
              57,
              54,
              98,
              54,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              66,
              114,
              97,
              110,
              100,
              105,
              57,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              107,
              97,
              116,
              101,
              108,
              121,
              110,
              51,
              53,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              54,
              45,
              48,
              49,
              45,
              49,
              53,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              51,
              48,
              51,
              49,
              46,
              52,
              55,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              44,
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              54,
              50,
              101,
              102,
              49,
              99,
              101,
              51,
              45,
              97,
              97,
              53,
              56,
              45,
              52,
              98,
              52,
              53,
              45,
              97,
              50,
              56,
              48,
              45,
              99,
              51,
              51,
              56,
              99,
              102,
              97,
              102,
              54,
              54,
              97,
              98,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              69,
              110,
              105,
              100,
              50,
              56,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              103,
              105,
              111,
              118,
              97,
              110,
              110,
              121,
              46,
              119,
              101,
              115,
              116,
              54,
              64,
              104,
              111,
              116,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              54,
              55,
              45,
              48,
              56,
              45,
              50,
              51,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              56,
              49,
              49,
              46,
              57,
              57,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              125,
              93
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 486
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5deea47d-ec18-41db-a987-896883646136",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4f106216-5b48-4d16-b33e-aec15518e2a5"
        },
        "item": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "limit",
                "value": "5"
              },
              {
                "key": "page",
                "value": "1"
              },
              {
                "key": "country",
                "value": "ASDASD"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e06d2c0d-d613-4722-bdba-d8cb39d9c254",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5f3532d4-4dd7-4ba7-aa35-1af91130a89b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 404",
              "message": "expected response to have status code 404 but got 400",
              "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0eaaca18-49c9-4e8c-ba65-5e4f68023c33",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c6a84ced-68cd-4b55-b942-40de9f2bbcdc"
        },
        "item": {
          "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "1"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6cb61283-ad12-4f9a-9ceb-f1cdac9bfe1b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "9137776c-dc04-4b7a-ae13-bed7663c5561",
          "status": "Not Found",
          "code": 404,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-EABhUno6FjF6SPIShivMGp7fuBw\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              80,
              108,
              97,
              121,
              101,
              114,
              32,
              110,
              111,
              116,
              32,
              102,
              111,
              117,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 28
        },
        "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
        "assertions": [
          {
            "assertion": "Status code is 404",
            "skipped": false
          },
          {
            "assertion": "Message is Player not found",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5a7feaac-0ffe-43a0-953a-58c8dfc82845",
          "length": 9,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "c47fdf24-bf3f-4cf1-a0b0-05f220304b11"
        },
        "item": {
          "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
          "name": "GET player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: 1,",
                  "        expectedStatus: 404,",
                  "        expectedMessage: \"Player not found\",",
                  "    },",
                  "    {",
                  "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "df77015a-4527-4650-913e-2fd4729f033a"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "416df7a7-052a-4e2c-81b2-3ad4c2c82721",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ca0be18c-8842-45d1-b64c-1a4883ec7786",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "163"
            },
            {
              "key": "ETag",
              "value": "W/\"a3-X6SgfL4ACXucGO10N3VK+h28gzA\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              105,
              100,
              34,
              58,
              34,
              100,
              102,
              55,
              55,
              48,
              49,
              53,
              97,
              45,
              52,
              53,
              50,
              55,
              45,
              52,
              54,
              53,
              48,
              45,
              57,
              49,
              51,
              101,
              45,
              50,
              102,
              100,
              52,
              55,
              50,
              57,
              102,
              48,
              51,
              51,
              97,
              34,
              44,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              67,
              97,
              110,
              100,
              105,
              99,
              101,
              52,
              57,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              114,
              97,
              121,
              109,
              111,
              110,
              100,
              46,
              99,
              111,
              108,
              108,
              105,
              110,
              115,
              55,
              49,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              49,
              57,
              55,
              48,
              45,
              49,
              49,
              45,
              49,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              57,
              53,
              46,
              57,
              54,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              75,
              82,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 163
        },
        "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "71781e71-c20f-4497-900d-dd8838d6d754",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "01179e0d-2f4a-4bcc-ab8a-b6130b2f4e77"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8e3b675d-79ec-4f8e-a991-e86fc45a4c19",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "be27c892-3b51-4c53-a7fb-47a27bb55115",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ffc5ec4c-88fd-46f6-925e-53581add1c61",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "e1a4eaf4-f5fe-41c8-b8e0-6c50c0efdacc"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {}{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a1feb1b1-987a-48dc-a0f4-8e65db047a19",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "be75df63-4778-450f-9e6a-68e0c14af6d4",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 25
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5cdd6cc7-de46-4645-bb13-61278ac7a0e6",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "abd81c77-2265-4315-a264-325b2eef47f0"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f706e6c2-b5a1-4042-b29b-9a2e754dfb97",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "119",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "cd384c66-dd32-4fe1-a62e-2d8ec695cc4b",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "28"
            },
            {
              "key": "ETag",
              "value": "W/\"1c-qeX1O6o8DzDHKvaBbkoAq19nEEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 28
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e3479978-cc84-4d42-82f2-6040fbeb8865",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "11e4f464-1bff-4afa-b8ad-9476731748de"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60eba9c5-8e31-47c3-a5fe-e568103d2c8e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "106",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "682b4c98-c955-4060-9c20-d8dbbf921c3f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-ZXxU9PuyF+UpUGdndifSZ6AtgHo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              101,
              109,
              97,
              105,
              108,
              32,
              102,
              111,
              114,
              109,
              97,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "faed2c40-4b24-4399-b838-6ca7807e5105",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "bf02b00d-55d0-490b-ab76-7425164edc73"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e4c54699-7ff1-49f9-8f34-804471323444",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "113",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "155ed256-1dd0-4c3c-856a-3f7737de7900",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-vNY7RilGMrC5/vB4il5a/uRHX0s\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              98,
              105,
              114,
              116,
              104,
              32,
              100,
              97,
              116,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "61d51e57-b7ba-417b-b882-039ed1950012",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "75d0663e-06a9-45f4-b482-dafc51fadf70"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a59f5bb8-3f4b-4c64-b5ae-c9939edcf92b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "205b2cf7-b04c-4221-b3cb-9069bf6c33b0",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4cf3365c-316b-4b01-a202-6f02a424c5e2",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "0291c937-9785-48ba-b8e0-6b6708374531"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c734ae47-0859-4446-8b65-f6fdf83204c9",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2024-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ebeee63f-61ac-44fd-9bfc-cd4fda1d5479",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-67W5cxcFIDvxvp7O3+drGh9yFVI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              85,
              110,
              100,
              101,
              114,
              97,
              103,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 20
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5df4d293-ec97-4171-adcf-1255bd1e355e",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "b7d6ce4a-c9c9-47a3-b6d8-ee7d4f0811ab"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "416e0a6b-55b8-476a-bf76-6c9353e7d799",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "120",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 0,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "1f0d7ff2-1ed6-4da9-8e26-b172676b1450",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 42
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c3f6097e-700f-40e9-aff3-63982bf9d8c6",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "40ac9646-388a-4012-ad08-d883951cbb62"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cfd48e9c-c667-4e87-adbd-d23c03cc244d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "122",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": -50,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "d2019f3f-261b-43a1-b468-0294735336f2",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "42"
            },
            {
              "key": "ETag",
              "value": "W/\"2a-VTh75hIBhjRpl8E/qhnIq18AMrc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              66,
              97,
              108,
              97,
              110,
              99,
              101,
              32,
              109,
              117,
              115,
              116,
              32,
              98,
              101,
              32,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              32,
              116,
              104,
              97,
              110,
              32,
              48,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 42
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "5dd4e31c-e825-4930-805a-b73383587ca1",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "70ba19b2-2214-4d2e-b1d4-33448079d8a0"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8638af16-ec05-4ab7-91c5-9e5243876cd0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "121",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "70e3c925-7b31-44e8-b999-dc15af6e45cb",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 32
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "7f765255-ae0a-438e-9bde-4b5998ed440b",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "39cbff8d-88f1-4dc2-b2a9-c53165167bf4"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "1d7277a3-f289-40a7-9ea6-1025cb9634e1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "127",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"ASDASD\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ceb20259-a524-4394-af4a-de9f1344fa2f",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "32"
            },
            {
              "key": "ETag",
              "value": "W/\"20-DTgqh1Gypnrg8nuD79sDjUk04MY\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              32,
              99,
              111,
              100,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 32
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "de542935-2a9f-4f0f-87fb-6c6f79a4d245",
          "length": 9,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "48594174-940b-4427-a04a-548a07ba5e7c"
        },
        "item": {
          "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
          "name": "POST player",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
              "options": {
                "raw": {
                  "language": "json"
                }
              }
            }
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"What \",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer {}\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2024-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 0,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: -50,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"ASDASD\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        username: \"test\",",
                  "        email: \"johndoe@gmail.com\",",
                  "        birthDate: \"2000-01-01\",",
                  "        balance: 5000,",
                  "        country: \"HU\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 201,",
                  "        expectedMessage: undefined",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "pm.environment.set(\"playerId\", response.id);",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "Content-Type",
              "value": "application/json",
              "system": true
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "aa1587c7-946a-495d-9944-4f9e1b015725",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            },
            {
              "key": "Content-Length",
              "value": "123",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"test\",\n  \"email\": \"johndoe@gmail.com\",\n  \"birthDate\": \"2000-01-01\",\n  \"balance\": 5000,\n  \"country\": \"HU\"\n}",
            "options": {
              "raw": {
                "language": "json"
              }
            }
          }
        },
        "response": {
          "id": "ae4da8b0-64d3-4af6-8f71-f90d7c7bdaef",
          "status": "Created",
          "code": 201,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "146"
            },
            {
              "key": "ETag",
              "value": "W/\"92-TZ6KUrTFPaE/FQMe9f6vCg00ryM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              58,
              34,
              116,
              101,
              115,
              116,
              34,
              44,
              34,
              101,
              109,
              97,
              105,
              108,
              34,
              58,
              34,
              106,
              111,
              104,
              110,
              100,
              111,
              101,
              64,
              103,
              109,
              97,
              105,
              108,
              46,
              99,
              111,
              109,
              34,
              44,
              34,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              58,
              34,
              50,
              48,
              48,
              48,
              45,
              48,
              49,
              45,
              48,
              49,
              34,
              44,
              34,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              58,
              53,
              48,
              48,
              48,
              44,
              34,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              58,
              34,
              72,
              85,
              34,
              44,
              34,
              105,
              100,
              34,
              58,
              34,
              98,
              54,
              101,
              97,
              98,
              97,
              54,
              99,
              45,
              98,
              49,
              98,
              101,
              45,
              52,
              51,
              50,
              50,
              45,
              56,
              54,
              102,
              55,
              45,
              102,
              54,
              57,
              55,
              102,
              52,
              52,
              53,
              49,
              57,
              98,
              54,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 146
        },
        "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
        "assertions": [
          {
            "assertion": "Status code is 201",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ff7fd925-40f3-47d7-90fc-2a3a8cefb47e",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d1e36088-4467-40b2-bd22-1978fafbbaa5"
        },
        "item": {
          "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "What X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "48c9e806-24d9-49ac-b330-985b3b91827b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "a3ef0601-c832-4ed3-bd93-f51431d5c949",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "4de69c68-c294-47ec-b171-e585876b62a9",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "fad96931-f3de-4fa3-8c45-6a3f25fcd54c"
        },
        "item": {
          "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "12345678-05b7-4d76-969c-c7336e247ca6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer X{\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "dcdd6a66-6bf6-4ecb-9df0-00ce48c7e75e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "36859838-1cd6-440a-9614-a2dfaf49a51d",
          "status": "Unauthorized",
          "code": 401,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-1luTU257I9tvKUXOJotGBQDVDqk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              116,
              111,
              107,
              101,
              110,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
        "assertions": [
          {
            "assertion": "Status code is 401",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e1fa6faf-f479-4dce-92e3-4aaabb70e736",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e34ef631-bd65-4e70-979f-e0bd5735131d"
        },
        "item": {
          "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "players",
              "b6eaba6c-b1be-4322-86f7-f697f44519b6"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {\"username\":\"user1\",\"hash\":\"MjAyNS0wNS0zMVQxNDoxMjoyOVo=\",\"validAt\":\"2025-05-31T14:12:29Z\"}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "37359705-8bcf-43c9-b399-3e28730071e6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "response": {
          "id": "fefe0be4-42ae-4ca2-b594-db0fc8964f8f",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Security-Policy",
              "value": "default-src 'none'"
            },
            {
              "key": "X-Content-Type-Options",
              "value": "nosniff"
            },
            {
              "key": "Content-Type",
              "value": "text/html; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "1582"
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              60,
              33,
              68,
              79,
              67,
              84,
              89,
              80,
              69,
              32,
              104,
              116,
              109,
              108,
              62,
              10,
              60,
              104,
              116,
              109,
              108,
              32,
              108,
              97,
              110,
              103,
              61,
              34,
              101,
              110,
              34,
              62,
              10,
              60,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              109,
              101,
              116,
              97,
              32,
              99,
              104,
              97,
              114,
              115,
              101,
              116,
              61,
              34,
              117,
              116,
              102,
              45,
              56,
              34,
              62,
              10,
              60,
              116,
              105,
              116,
              108,
              101,
              62,
              69,
              114,
              114,
              111,
              114,
              60,
              47,
              116,
              105,
              116,
              108,
              101,
              62,
              10,
              60,
              47,
              104,
              101,
              97,
              100,
              62,
              10,
              60,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              112,
              114,
              101,
              62,
              82,
              101,
              102,
              101,
              114,
              101,
              110,
              99,
              101,
              69,
              114,
              114,
              111,
              114,
              58,
              32,
              112,
              32,
              105,
              115,
              32,
              110,
              111,
              116,
              32,
              100,
              101,
              102,
              105,
              110,
              101,
              100,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              52,
              50,
              58,
              51,
              57,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              110,
              101,
              120,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              53,
              55,
              58,
              49,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              82,
              111,
              117,
              116,
              101,
              46,
              100,
              105,
              115,
              112,
              97,
              116,
              99,
              104,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              114,
              111,
              117,
              116,
              101,
              46,
              106,
              115,
              58,
              49,
              49,
              55,
              58,
              51,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              104,
              97,
              110,
              100,
              108,
              101,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              52,
              51,
              53,
              58,
              49,
              49,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              76,
              97,
              121,
              101,
              114,
              46,
              104,
              97,
              110,
              100,
              108,
              101,
              82,
              101,
              113,
              117,
              101,
              115,
              116,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              108,
              105,
              98,
              47,
              108,
              97,
              121,
              101,
              114,
              46,
              106,
              115,
              58,
              49,
              53,
              50,
              58,
              49,
              55,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              50,
              57,
              53,
              58,
              49,
              53,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              48,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              97,
              114,
              97,
              109,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              49,
              48,
              58,
              49,
              52,
              41,
              60,
              98,
              114,
              62,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              32,
              38,
              110,
              98,
              115,
              112,
              59,
              97,
              116,
              32,
              112,
              114,
              111,
              99,
              101,
              115,
              115,
              80,
              97,
              114,
              97,
              109,
              115,
              32,
              40,
              47,
              85,
              115,
              101,
              114,
              115,
              47,
              99,
              115,
              97,
              98,
              97,
              115,
              122,
              105,
              114,
              106,
              97,
              107,
              47,
              87,
              111,
              114,
              107,
              115,
              112,
              97,
              99,
              101,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              47,
              50,
              48,
              50,
              53,
              47,
              115,
              107,
              105,
              108,
              108,
              115,
              45,
              115,
              119,
              45,
              116,
              101,
              115,
              116,
              45,
              99,
              104,
              105,
              110,
              97,
              45,
              50,
              48,
              50,
              53,
              47,
              115,
              101,
              114,
              118,
              105,
              99,
              101,
              47,
              110,
              111,
              100,
              101,
              95,
              109,
              111,
              100,
              117,
              108,
              101,
              115,
              47,
              114,
              111,
              117,
              116,
              101,
              114,
              47,
              105,
              110,
              100,
              101,
              120,
              46,
              106,
              115,
              58,
              54,
              54,
              52,
              58,
              51,
              41,
              60,
              47,
              112,
              114,
              101,
              62,
              10,
              60,
              47,
              98,
              111,
              100,
              121,
              62,
              10,
              60,
              47,
              104,
              116,
              109,
              108,
              62,
              10
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 1582
        },
        "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
              "checksum": "85811af49f0c65890dd7101d9b5a68e2",
              "id": "f963cca6-ef67-44f2-8b6f-f0222a6deae9",
              "timestamp": 1748700629968,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "86f95fc6-b0b1-4d91-b608-fceca78f89d8",
          "length": 9,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "6aeef84b-078d-41a9-a4a8-2c92355e7a07"
        },
        "item": {
          "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
          "name": "GET stats",
          "request": {
            "url": {
              "path": [
                "api",
                "stats"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response keys are valid\", function () {",
                  "    Object.keys(pm.response.json()).forEach(key => {",
                  "        pm.expect(key.length).to.eql(2);",
                  "        pm.expect(key.toUpperCase()).to.eql(key);",
                  "    })",
                  "});"
                ],
                "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "stats"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "f24d2274-0ecb-4492-adce-c0da1cd482d0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "846c109c-eae6-4bb9-bfa7-213bfc583fa7",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "113"
            },
            {
              "key": "ETag",
              "value": "W/\"71-psExknJVFK4CoX3xwAuOvO5fRTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              66,
              82,
              34,
              58,
              54,
              44,
              34,
              65,
              85,
              34,
              58,
              57,
              44,
              34,
              85,
              83,
              34,
              58,
              54,
              44,
              34,
              73,
              78,
              34,
              58,
              57,
              44,
              34,
              72,
              85,
              34,
              58,
              51,
              44,
              34,
              67,
              79,
              34,
              58,
              55,
              44,
              34,
              75,
              82,
              34,
              58,
              56,
              44,
              34,
              72,
              75,
              34,
              58,
              57,
              44,
              34,
              74,
              80,
              34,
              58,
              56,
              44,
              34,
              70,
              82,
              34,
              58,
              51,
              44,
              34,
              83,
              71,
              34,
              58,
              55,
              44,
              34,
              71,
              66,
              34,
              58,
              53,
              44,
              34,
              67,
              65,
              34,
              58,
              53,
              44,
              34,
              67,
              78,
              34,
              58,
              55,
              44,
              34,
              77,
              79,
              34,
              58,
              51,
              44,
              34,
              68,
              69,
              34,
              58,
              53,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 113
        },
        "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Response keys are valid",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "46f6816f-7d8d-4680-8b1a-557e5f2684b8",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f240355c-65f4-48d2-a04f-eaf9a3586642"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3sQh"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "02c575ee-1463-4033-bd3f-c3cf9ee26918",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "802c8480-1194-4bb5-8277-c0d7c617f0a2",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:29 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 19
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "c013091c-f83d-4e39-b8b6-d8c465293655",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "fa243ca1-7730-4366-883b-f861c6dc7630"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s5h"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a01812b6-e592-4600-8002-f6409a7886f4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "db281940-6785-460b-86aa-2c278a622f94",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "16f22403-603b-4fca-b47b-a03e8aa9e11e",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4f809717-8036-4cf9-84a8-9f6b9835db68"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h5d7c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4b658eb1-0c2e-420f-bf06-f4a8f18ed742",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b0452b7c-4d85-4320-be72-02c407b455ca",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 30
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "046dd692-9aed-4a2d-9322-ac80495c39d6",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "84cb7eb6-e54d-4761-90e3-729caa0e1c7d"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4d"
              },
              {
                "key": "board",
                "value": "Ah5d6c9s7s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "419e7885-d1df-4af3-a483-f68a1c33d642",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "c902c818-6210-4c87-bc21-c396eae7392b",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "410749d3-e56c-45cd-8084-3d6a9fddd425",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "1687ee7d-68c7-4049-9738-bce72d98db7b"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h4h"
              },
              {
                "key": "board",
                "value": "Ah5h6c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "761b37ad-ce3b-44ff-9b69-4044c9e4236f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "dd65d4fc-5aba-41c3-8327-78721bd9a235",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "69533ea0-f27d-4d51-89b5-3f6ba9cce9f1",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "9df62cad-1f12-41c1-8905-8252d9e4b661"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3h3s"
              },
              {
                "key": "board",
                "value": "3c4h4c9h6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "465b8e4b-5e90-40fc-866d-ea0690cbea68",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b20874a3-16fa-48ef-9076-78f91ab732d3",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 25
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "516e21f9-ad14-46d5-abca-038a63447b78",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "589e7659-049b-472f-a8df-3c9b7ae36621"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s3d"
              },
              {
                "key": "board",
                "value": "3h3c6c9s6s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "5adcf74f-c62b-4b3d-912d-a7dabe243cd2",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "31d9acaf-f306-4e74-bf21-98e831dcb651",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b8070d83-c6e7-4cdc-b732-719ea6df1cad",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a1ad80f2-d684-4878-b939-1c4ddb949724"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "3s4s"
              },
              {
                "key": "board",
                "value": "5s6s7s9sTs"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cc7ded87-7e85-4881-89ba-ad6c9c2779fd",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "30e79209-63b0-4504-b42a-907b8dc20643",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "a6de7fb1-68b7-4e66-ba41-283fb6f1120d",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "36153bcc-d92d-40ed-a9a3-4c59dedc2d1b"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "As4s"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "673eec30-70a8-47bb-b714-8ec6475a5452",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6e9139b1-7da8-4321-83a9-4c68b48ec993",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "893dd0c9-614f-4358-ab85-3254b630c811",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "87b4c16a-1293-491c-ad6a-e0a0f77a1fb9"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsAs"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75aa21fc-42d9-478c-b8fb-a1491f4b15e0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "51e10333-47c0-43b5-b738-98271c653c81",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "99825737-69c7-48d5-9ae8-2136101b69f9",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a1f0cba6-2257-4c0f-bc87-b96a09cde3d3"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "null"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "51cc0112-6d24-41b2-ad5f-c081461ee430",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d52dea98-fa8c-415b-91a7-16ef8a32bb4e",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e52e2f39-af61-4623-b778-2fb6fec3d3f9",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "17ed36c7-7352-4607-86a8-8c96ca72f735"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "ASD"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "38cb61bc-cdc0-420e-bd99-2d05dda67902",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "d4ac9b48-89f3-4a53-9c54-ff2a4e9fa571",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "41262ea2-7d5d-42ab-b233-77c58e5f9292",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "f206538f-eb92-4c13-a833-e71ed04d2219"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "ASDAA"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be03c1bd-c03c-4b42-adee-a4711cf25440",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "b34dde8c-b7c4-45e6-b4f0-df5bb02d5306",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "85dcbc92-09ad-4357-8c56-7a688fa76e81",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "b98e635b-f883-4db8-aec0-4a87706b2f88"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "1234"
              },
              {
                "key": "board",
                "value": "KsQsJsTs5c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "4751f21d-3ca2-446f-92cb-1bc61c1fb95f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "339f5d3a-edaf-4af6-97bd-a25437d0963c",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "35c617e5-7610-44d4-91ed-bb80aa6b9685",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "c1d64d7d-5840-46b4-a212-22c2b91f4243"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "KsQs"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "be8215c8-2054-4507-913e-cf5126aede9f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "589121c7-9592-4834-b649-7b08e3acd334",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "410b2104-d86c-484f-a2cf-a477529c9a4b",
          "length": 9,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "4540261b-ad8c-4a21-b52c-918434c14fa4"
        },
        "item": {
          "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
          "name": "GET evaluate texas",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "texas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        hand: \"AcAs\",",
                  "        board: \"AhKhQhJhTh\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"KhQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"high card\"",
                  "    },",
                  "    {",
                  "        hand: \"3sQh\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s5h\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"two pair\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h5d7c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"three of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4d\",",
                  "        board: \"Ah5d6c9s7s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight\"",
                  "    },",
                  "    {",
                  "        hand: \"3h4h\",",
                  "        board: \"Ah5h6c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"flush\"",
                  "    },",
                  "    {",
                  "        hand: \"3h3s\",",
                  "        board: \"3c4h4c9h6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"full house\"",
                  "    },",
                  "    {",
                  "        hand: \"3s3d\",",
                  "        board: \"3h3c6c9s6s\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"four of a kind\"",
                  "    },",
                  "    {",
                  "        hand: \"3s4s\",",
                  "        board: \"5s6s7s9sTs\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"straight flush\"",
                  "    },",
                  "    {",
                  "        hand: \"As4s\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: \"royal flush\"",
                  "    },",
                  "    {",
                  "        hand: \"AsAs\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 500,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"ASD\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"ASDAA\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"1234\",",
                  "        board: \"KsQsJsTs5c\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: \"KsQs\",",
                  "        board: \"1234567890\",",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "    {",
                  "        hand: undefined,",
                  "        board: undefined,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: \"Invalid Texas input\"",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "texas"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": ""
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "61208d54-89a7-46b1-86b6-2d46803006ff",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1780e9c6-28e8-4710-8dfa-40df2bdf293d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-EjdyyHW1LRdFUNoOaLmUevxDWIM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              84,
              101,
              120,
              97,
              115,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Texas input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "e8b1fd95-93d3-4c89-911b-438afb247c5a",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "77c416ef-d03f-40b5-9488-9fd135cb591b"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QhJh9d2c"
              },
              {
                "key": "board",
                "value": "AhKhTh8h2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6d23c129-8cb5-4d61-a557-4d8793a7cd9f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ff04599f-507b-4b7c-adde-100bf6cead29",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "26"
            },
            {
              "key": "ETag",
              "value": "W/\"1a-94UAFGJYqxy9hSSHg6C9l3BwIyI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              114,
              111,
              121,
              97,
              108,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 26
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is royal flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "79e698cd-da70-4284-9c9f-56ecc061bcd1",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "84a8cd5b-914e-464b-977b-30b51634b069"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9h8h7h6d"
              },
              {
                "key": "board",
                "value": "ThJhQh2c3d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "042e4e90-fb30-49fd-9e98-32b3b69fea5f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "16695c65-7f8f-4a8e-a79a-f9679213da40",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-TPFarTl9CKIVnPx37x/xn4vGWSo\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              32,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 29
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "0126a474-0b80-4c55-a4d4-501a10153ea2",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e0c612b2-da6d-4281-a203-c7caf0bd7d43"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "7s7c2d3h"
              },
              {
                "key": "board",
                "value": "7d7hQdKs5s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3f1abd19-7ed3-4a1c-b7cf-16eeed297d5c",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "46f25d09-835e-4130-9322-87d30d6e5962",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "29"
            },
            {
              "key": "ETag",
              "value": "W/\"1d-Bt7B78AwYaSL5mxYjekU8QZf3wU\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              111,
              117,
              114,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 29
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is four of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "aaa63958-1d5e-45be-aaac-68c4f803928e",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "55a9efc1-f744-4767-ab04-f00eb33d37f9"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AdAh9s9c"
              },
              {
                "key": "board",
                "value": "Ac8dQs8s3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c3acfbf-497e-4df4-8e16-e5736c69fb6a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "5f3f3cfd-19ae-4532-8522-063697be377e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "25"
            },
            {
              "key": "ETag",
              "value": "W/\"19-K7fSIG0WNX6EXIjIrX3VVdpLyoc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              117,
              108,
              108,
              32,
              104,
              111,
              117,
              115,
              101,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 3,
          "responseSize": 25
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is full house",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "568fe53d-faa4-46a1-b419-51131df0a65e",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "515345ef-9fe6-4c3c-ac1e-2f47cc2389a0"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "5h6h9c2d"
              },
              {
                "key": "board",
                "value": "AhKhTh8h3h"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bc0c971e-b634-4037-8676-8cc2326c8a8a",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "70bc998d-0a8e-4533-8426-15015f042f9e",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "20"
            },
            {
              "key": "ETag",
              "value": "W/\"14-ej8dxDlZ6+r5r7+4/zo3EltI93w\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              102,
              108,
              117,
              115,
              104,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 20
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is flush",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "84c34d41-5eef-40de-971e-e6f0186d14de",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "29ad8e88-68d3-4470-8eb9-75cc5b418aac"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "9d8c7h2s"
              },
              {
                "key": "board",
                "value": "6s5cThJcQd"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c91355ba-e79e-4cf2-906b-813e83412766",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "e2acda97-3114-486d-9968-4e2f0424c035",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-hyC0VG3mSjQ7R6L+e5DVTUCKxps\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 23
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is straight",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "ca6499e6-3906-4fb7-aa94-701ff17e35d4",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e2fc66a0-069d-42c7-a398-be4e72fc3d03"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "QcQs3d7s"
              },
              {
                "key": "board",
                "value": "Qh9h2c5d7d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0b288133-339f-4e50-bfb2-600ef09c1243",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "280f16f2-1786-4c98-a4d6-268b7f6c28c6",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "30"
            },
            {
              "key": "ETag",
              "value": "W/\"1e-xsYGbwRCQf646ADyQLzxTw4VyXM\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              104,
              114,
              101,
              101,
              32,
              111,
              102,
              32,
              97,
              32,
              107,
              105,
              110,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 30
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is three of a kind",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "d8632991-dcb4-4626-bc27-7ad853bec20e",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "e9112f88-87c8-48ab-8df7-ada8327501c1"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "AsKd3c2h"
              },
              {
                "key": "board",
                "value": "AhKc4d7s8c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "60b8bf61-24fe-4251-a59f-05c42587f57e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "959b18c7-20f9-49ad-9aa0-e5992ac400e9",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "23"
            },
            {
              "key": "ETag",
              "value": "W/\"17-Ao0Ouus3uJd19pIlYnhSwORY8Tc\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              116,
              119,
              111,
              32,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 23
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is two pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "fad5865f-0ce5-4e86-b00e-378ef1f1c115",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6fa379b2-0872-47e0-bdfa-2bfd6576d3e4"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "6c7d3s2h"
              },
              {
                "key": "board",
                "value": "AhKhTdJd3c"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "59b2663e-472d-4541-a870-e1e42fb93323",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ff666415-0eef-46ee-bd7a-89bc871d63da",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "19"
            },
            {
              "key": "ETag",
              "value": "W/\"13-3+2keQb7CzrbIeRbKnvuu4sUces\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              112,
              97,
              105,
              114,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 19
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is pair",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "b9fcf80f-6e92-4454-b79b-cdbb23f0ff18",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "5b347b5a-64ab-40ba-b92a-d558c3dbd480"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d5s9cJd"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e396dc6f-4c4a-4827-9fba-67ff77fa3d13",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "1478478b-fb65-4ac9-b300-a21a4877679f",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "24"
            },
            {
              "key": "ETag",
              "value": "W/\"18-Mkx3c8GMNhLgvGfJJLct9crNxEg\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              104,
              97,
              110,
              100,
              82,
              97,
              110,
              107,
              34,
              58,
              34,
              104,
              105,
              103,
              104,
              32,
              99,
              97,
              114,
              100,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 24
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false
          },
          {
            "assertion": "Message is high card",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "665054bd-a91b-4af6-9e2b-9f82c3a6f0f4",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "8b835254-9c06-4da6-8d8b-f29df4057fe9"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d"
              },
              {
                "key": "board",
                "value": "AhQc8h7s4s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "276f0627-6af7-4766-be5a-335de542d3f1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "701cf5d7-81b4-4d6c-90b8-3a3a0798ca58",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "82b9a3ec-e489-4f1b-b45d-01fcef541311",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "808b29d4-d2c1-4664-aaf3-dd8d360379b5"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "2s3s"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8b1487dc-f28c-4aef-914f-535dbd1286c1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "49b46b60-f44f-49c7-86f6-f021816e84e9",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "adea38e1-66f5-41c1-ac84-facca99a9853",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "347ca8d4-0b27-4bf8-a8b5-5cbac5657ba4"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "null"
              },
              {
                "key": "board",
                "value": ""
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "309592ba-a244-4ca3-87c7-cc2266ce632e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ee14011b-31f0-49a7-9c28-46d192080513",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "decb96b6-fae2-4d37-882a-1edd4fa01cf9",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "a90aa48e-92ff-446c-9653-87851cfc656d"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "12345678"
              },
              {
                "key": "board",
                "value": "2d3d4d5d6d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "07492b48-7ac0-4e96-98e4-19d11014971f",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "ab49ce84-9705-493c-8b70-f639e10b0226",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "86e4cfb1-6654-4636-a431-ff961d3de40b",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "ceccb4f3-30e4-44f5-af8c-aea7c2a8857a"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d3d4d5d"
              },
              {
                "key": "board",
                "value": "1234567890"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0bdf9038-1e73-4533-9f79-813c3d158c35",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "7cf295b1-76fd-4009-949f-8cdc7257cf5d",
          "status": "Bad Request",
          "code": 400,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 400",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "27c70235-998a-4e1a-a957-314e1a800997",
          "length": 9,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "982c855a-36ba-4d43-b646-ccdd0afd4f01"
        },
        "item": {
          "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
          "name": "GET evaluate omaha",
          "request": {
            "url": {
              "path": [
                "api",
                "evaluate",
                "omaha"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "hand",
                  "value": "{{hand}}"
                },
                {
                  "key": "board",
                  "value": "{{board}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        \"hand\": \"QhJh9d2c\",",
                  "        \"board\": \"AhKhTh8h2d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"royal flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9h8h7h6d\",",
                  "        \"board\": \"ThJhQh2c3d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"7s7c2d3h\",",
                  "        \"board\": \"7d7hQdKs5s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"four of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AdAh9s9c\",",
                  "        \"board\": \"Ac8dQs8s3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"full house\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"5h6h9c2d\",",
                  "        \"board\": \"AhKhTh8h3h\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"flush\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"9d8c7h2s\",",
                  "        \"board\": \"6s5cThJcQd\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"straight\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"QcQs3d7s\",",
                  "        \"board\": \"Qh9h2c5d7d\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"three of a kind\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"AsKd3c2h\",",
                  "        \"board\": \"AhKc4d7s8c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"two pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"6c7d3s2h\",",
                  "        \"board\": \"AhKhTdJd3c\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"pair\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d5s9cJd\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 200,",
                  "        \"expectedMessage\": \"high card\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d\",",
                  "        \"board\": \"AhQc8h7s4s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"2s3s\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": null,",
                  "        \"board\": undefined,",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"12345678\",",
                  "        \"board\": \"2d3d4d5d6d\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d3d4d5d\",",
                  "        \"board\": \"1234567890\",",
                  "        \"expectedStatus\": 400,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    },",
                  "    {",
                  "        \"hand\": \"2d2d2d2d\",",
                  "        \"board\": \"2d2d2d2d2d\",",
                  "        \"expectedStatus\": 500,",
                  "        \"expectedMessage\": \"Invalid Omaha input\"",
                  "    }",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "evaluate",
              "omaha"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "hand",
                "value": "2d2d2d2d"
              },
              {
                "key": "board",
                "value": "2d2d2d2d2d"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "bbac4e6e-d137-40e0-8fc2-037d05bda655",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "6fdd8cb2-65a5-4cef-b0d7-fb52d6498284",
          "status": "Internal Server Error",
          "code": 500,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "31"
            },
            {
              "key": "ETag",
              "value": "W/\"1f-0j1/GprFBlFW1nU6viBSXWxhcTk\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              101,
              114,
              114,
              111,
              114,
              34,
              58,
              34,
              73,
              110,
              118,
              97,
              108,
              105,
              100,
              32,
              79,
              109,
              97,
              104,
              97,
              32,
              105,
              110,
              112,
              117,
              116,
              34,
              125
            ]
          },
          "cookie": [],
          "responseTime": 1,
          "responseSize": 31
        },
        "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
        "assertions": [
          {
            "assertion": "Status code is 500",
            "skipped": false
          },
          {
            "assertion": "Message is Invalid Omaha input",
            "skipped": false
          }
        ]
      },
      {
        "cursor": {
          "ref": "633a660b-30f3-4cc8-8679-b2417676abfb",
          "length": 9,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "b0ae8094-c98b-4389-8e44-1aaf9a945592"
        },
        "item": {
          "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
          "name": "GET coverage",
          "request": {
            "url": {
              "path": [
                "api",
                "coverage"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "2345",
            "path": [
              "api",
              "coverage"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "a2db3237-46bd-4b4e-b2ab-61ceb6676a4e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:2345",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "response": {
          "id": "32c74cfe-0f7b-492c-ac14-53cacee651a0",
          "status": "OK",
          "code": 200,
          "header": [
            {
              "key": "X-Powered-By",
              "value": "Express"
            },
            {
              "key": "Access-Control-Allow-Origin",
              "value": "*"
            },
            {
              "key": "Content-Type",
              "value": "application/json; charset=utf-8"
            },
            {
              "key": "Content-Length",
              "value": "6787"
            },
            {
              "key": "ETag",
              "value": "W/\"1a83-2NoOmv2X9kWn8t7e3WQzgOqr0rI\""
            },
            {
              "key": "Date",
              "value": "Sat, 31 May 2025 14:10:30 GMT"
            },
            {
              "key": "Connection",
              "value": "keep-alive"
            },
            {
              "key": "Keep-Alive",
              "value": "timeout=5"
            }
          ],
          "stream": {
            "type": "Buffer",
            "data": [
              123,
              34,
              118,
              97,
              108,
              117,
              101,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              56,
              49,
              46,
              54,
              57,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              54,
              57,
              46,
              55,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              57,
              50,
              46,
              49,
              49,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              55,
              49,
              44,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              51,
              51,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              51,
              56,
              125,
              44,
              34,
              99,
              111,
              118,
              101,
              114,
              101,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              93,
              44,
              34,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              93,
              125,
              44,
              34,
              116,
              101,
              115,
              116,
              67,
              97,
              115,
              101,
              115,
              34,
              58,
              123,
              34,
              99,
              114,
              117,
              100,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              34,
              58,
              91,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              93,
              44,
              34,
              116,
              111,
              116,
              97,
              108,
              34,
              58,
              91,
              34,
              97,
              117,
              116,
              104,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              112,
              97,
              115,
              115,
              119,
              111,
              114,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              99,
              114,
              101,
              100,
              101,
              110,
              116,
              105,
              97,
              108,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              108,
              111,
              103,
              105,
              110,
              46,
              117,
              110,
              97,
              117,
              116,
              104,
              111,
              114,
              105,
              122,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              109,
              97,
              110,
              105,
              112,
              117,
              108,
              97,
              116,
              101,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              114,
              101,
              113,
              117,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              97,
              117,
              116,
              104,
              46,
              116,
              111,
              107,
              101,
              110,
              45,
              101,
              120,
              112,
              105,
              114,
              101,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              104,
              105,
              103,
              104,
              101,
              114,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              111,
              109,
              97,
              104,
              97,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              101,
              114,
              114,
              111,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              111,
              117,
              114,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              102,
              117,
              108,
              108,
              45,
              104,
              111,
              117,
              115,
              101,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              104,
              105,
              103,
              104,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              98,
              111,
              97,
              114,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              104,
              97,
              110,
              100,
              45,
              108,
              101,
              110,
              103,
              116,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              109,
              105,
              115,
              115,
              105,
              110,
              103,
              45,
              112,
              97,
              114,
              97,
              109,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              112,
              108,
              97,
              121,
              45,
              98,
              111,
              97,
              114,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              114,
              111,
              121,
              97,
              108,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              116,
              114,
              97,
              105,
              103,
              104,
              116,
              45,
              102,
              108,
              117,
              115,
              104,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              115,
              117,
              99,
              99,
              101,
              115,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              104,
              114,
              101,
              101,
              45,
              111,
              102,
              45,
              97,
              45,
              107,
              105,
              110,
              100,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              116,
              119,
              111,
              45,
              112,
              97,
              105,
              114,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              98,
              111,
              116,
              104,
              45,
              99,
              97,
              114,
              100,
              115,
              34,
              44,
              34,
              101,
              118,
              97,
              108,
              117,
              97,
              116,
              101,
              46,
              116,
              101,
              120,
              97,
              115,
              46,
              117,
              115,
              101,
              45,
              111,
              110,
              101,
              45,
              99,
              97,
              114,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              100,
              101,
              108,
              101,
              116,
              101,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              97,
              108,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              105,
              100,
              46,
              110,
              111,
              116,
              45,
              102,
              111,
              117,
              110,
              100,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              45,
              99,
              111,
              100,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              108,
              105,
              109,
              105,
              116,
              45,
              110,
              111,
              116,
              45,
              101,
              113,
              117,
              97,
              108,
              45,
              116,
              111,
              45,
              116,
              111,
              116,
              97,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              101,
              103,
              97,
              116,
              105,
              118,
              101,
              45,
              108,
              105,
              109,
              105,
              116,
              45,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              109,
              111,
              114,
              101,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              110,
              111,
              45,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              45,
              102,
              111,
              114,
              45,
              112,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              103,
              101,
              116,
              46,
              112,
              97,
              103,
              101,
              45,
              103,
              114,
              101,
              97,
              116,
              101,
              114,
              45,
              116,
              104,
              97,
              110,
              45,
              49,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              97,
              117,
              116,
              104,
              46,
              105,
              110,
              118,
              97,
              108,
              105,
              100,
              45,
              116,
              111,
              107,
              101,
              110,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              97,
              103,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              97,
              108,
              97,
              110,
              99,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              98,
              105,
              114,
              116,
              104,
              68,
              97,
              116,
              101,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              101,
              109,
              97,
              105,
              108,
              34,
              44,
              34,
              112,
              108,
              97,
              121,
              101,
              114,
              115,
              46,
              112,
              111,
              115,
              116,
              46,
              118,
              97,
              108,
              105,
              100,
              97,
              116,
              105,
              111,
              110,
              46,
              117,
              115,
              101,
              114,
              110,
              97,
              109,
              101,
              34,
              44,
              34,
              115,
              116,
              97,
              116,
              115,
              46,
              103,
              101,
              116,
              46,
              98,
              121,
              45,
              99,
              111,
              117,
              110,
              116,
              114,
              121,
              34,
              93,
              125,
              125
            ]
          },
          "cookie": [],
          "responseTime": 2,
          "responseSize": 6787
        },
        "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9"
      }
    ],
    "transfers": {
      "responseTotal": 10956
    },
    "failures": [
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "5a70ea7a-2ef9-4485-bc52-0711c8279bed",
          "timestamp": 1748700629624,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
                  }
                }
              ]
            },
            {
              "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
                  }
                }
              ]
            },
            {
              "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
                  }
                }
              ]
            },
            {
              "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
                  }
                }
              ]
            },
            {
              "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
                  }
                }
              ]
            },
            {
              "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
                  }
                }
              ]
            },
            {
              "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
                  }
                }
              ]
            },
            {
              "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
                  }
                }
              ]
            },
            {
              "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "de3d11db-11a8-4159-950d-b2dfda6091a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c0106eb1-c5f5-47d2-a581-ee3ed6cb96dc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9b54e79-4e00-49b9-9652-7d85a6ce886b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "855b4338-e68f-4918-be2c-759f1bf5e9d2"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "013ae6e7-05cf-4c6f-b90d-5fc7473caa87",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f45fe10c-5708-4296-87f2-288b743465f6",
          "scriptId": "8f918ab7-2a30-4f0a-8d51-95615009759e",
          "execution": "324c8f4f-d169-46c8-9023-f4bb2a7408ca"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected response to have status code 200 but got 400",
          "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "36a8da34acf97ca6ef4513b3881cda72",
          "id": "539e85da-4991-4b65-9cc3-3c4d0e6d19b9",
          "timestamp": 1748700629642,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
                  }
                }
              ]
            },
            {
              "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
                  }
                }
              ]
            },
            {
              "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
                  }
                }
              ]
            },
            {
              "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
                  }
                }
              ]
            },
            {
              "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
                  }
                }
              ]
            },
            {
              "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
                  }
                }
              ]
            },
            {
              "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
                  }
                }
              ]
            },
            {
              "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
                  }
                }
              ]
            },
            {
              "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "de3d11db-11a8-4159-950d-b2dfda6091a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c0106eb1-c5f5-47d2-a581-ee3ed6cb96dc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9b54e79-4e00-49b9-9652-7d85a6ce886b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "855b4338-e68f-4918-be2c-759f1bf5e9d2"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "db0e60fa-902f-4a67-b935-284ce190a30d",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4554d49c-3bbd-4a25-978f-c9744e75b64b",
          "scriptId": "8f918ab7-2a30-4f0a-8d51-95615009759e",
          "execution": "d819f1a6-070a-4fc6-a80b-1ab66310807d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 404",
          "message": "expected response to have status code 404 but got 400",
          "stack": "AssertionError: expected response to have status code 404 but got 400\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "2943de630e4d4df5da94e8c1bdee38a3",
          "id": "c3a4f10b-c496-4dd1-9835-980675274417",
          "timestamp": 1748700629691,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
          "name": "GET players",
          "request": {
            "url": {
              "path": [
                "api",
                "players"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "limit",
                  "value": "{{limit}}"
                },
                {
                  "key": "page",
                  "value": "{{page}}"
                },
                {
                  "key": "country",
                  "value": "{{country}}"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        limit: null,",
                  "        page: null,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 2,",
                  "        country: null,",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 0,",
                  "        page: -1,",
                  "        country: null,",
                  "        expectedStatus: 400,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"HU\",",
                  "        expectedStatus: 200,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "    {",
                  "        limit: 5,",
                  "        page: 1,",
                  "        country: \"ASDASD\",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined,",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                  "});",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
                  }
                }
              ]
            },
            {
              "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
                  }
                }
              ]
            },
            {
              "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
                  }
                }
              ]
            },
            {
              "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
                  }
                }
              ]
            },
            {
              "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
                  }
                }
              ]
            },
            {
              "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
                  }
                }
              ]
            },
            {
              "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
                  }
                }
              ]
            },
            {
              "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
                  }
                }
              ]
            },
            {
              "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "de3d11db-11a8-4159-950d-b2dfda6091a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c0106eb1-c5f5-47d2-a581-ee3ed6cb96dc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9b54e79-4e00-49b9-9652-7d85a6ce886b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "855b4338-e68f-4918-be2c-759f1bf5e9d2"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "5deea47d-ec18-41db-a987-896883646136",
          "length": 9,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "4f106216-5b48-4d16-b33e-aec15518e2a5",
          "scriptId": "8f918ab7-2a30-4f0a-8d51-95615009759e",
          "execution": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "Unexpected token '<' at 1:1\n<!DOCTYPE html>\n^",
          "checksum": "85811af49f0c65890dd7101d9b5a68e2",
          "id": "f963cca6-ef67-44f2-8b6f-f0222a6deae9",
          "timestamp": 1748700629968,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
          "name": "DELETE player",
          "request": {
            "url": {
              "path": [
                "api",
                "players",
                "{{id}}"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "{{testToken}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "const testCases = [",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"What X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer X\",",
                  "        expectedStatus: 401,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 204,",
                  "        expectedMessage: undefined",
                  "    },",
                  "    {",
                  "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                  "        tokenPrefix: \"Bearer \",",
                  "        expectedStatus: 404,",
                  "        expectedMessage: undefined",
                  "    },",
                  "];",
                  "",
                  "pm.variables.set(\"testCaseCount\", testCases.length);",
                  "",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "",
                  "if (index >= testCases.length) {",
                  "    pm.execution.setNextRequest(null);  // Stop running",
                  "} else {",
                  "    let currentCase = testCases[index];",
                  "",
                  "    if (currentCase.id === undefined) {",
                  "        currentCase.id = pm.environment.get(\"playerId\");",
                  "    }",
                  "",
                  "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                  "",
                  "    Object.keys(currentCase).forEach(key => {",
                  "        pm.variables.set(key, currentCase[key]);",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                  "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                  "const response = pm.response.code === 204 ? null : pm.response.json();",
                  "",
                  "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                  "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                  "});",
                  "",
                  "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                  "",
                  "if (expectedMessage !== undefined) {",
                  "    pm.test(\"Message is \" + expectedMessage, function () {",
                  "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                  "    });",
                  "}",
                  "",
                  "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                  "    pm.variables.unset(\"testCaseIndex\");",
                  "    pm.variables.unset(\"testCaseCount\");",
                  "} else {",
                  "    pm.variables.set(\"testCaseIndex\", index);",
                  "    pm.execution.setNextRequest(pm.info.requestName);",
                  "}"
                ],
                "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
              }
            }
          ]
        },
        "parent": {
          "_": {
            "postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "exporter_id": "30174363"
          },
          "item": [
            {
              "id": "3a7c5376-39a8-4e64-a685-cfc31926a08f",
              "name": "POST login",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "4712b5f3-ff76-4c1e-9373-916cbe96519c",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "pm.test(\"Message is \" + pm.variables.get(\"expectedMessage\"), function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(pm.variables.get(\"expectedMessage\"));",
                      "});",
                      "",
                      "pm.environment.set(\"token\", response.token);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "138d1d84-f844-4cd5-bb65-a567ae46b7c0"
                  }
                },
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "0fde155c-d415-44ac-bc4a-ee7dadab618a",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: null,",
                      "        password: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Username and password are required\",",
                      "    },",
                      "    {",
                      "        username: \"user10\",",
                      "        password: \"password\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"jondoe\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: \"Unauthorized\",",
                      "    },",
                      "    {",
                      "        username: \"user1\",",
                      "        password: \"123456\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"Login successful\",",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    console.log(\"All test cases done.\");",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "098cd11d-12c8-4e17-967d-ade9252e0c67"
                  }
                }
              ]
            },
            {
              "id": "a24d9cc8-acef-4502-a6d9-a4e1130e52f3",
              "name": "GET players",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "limit",
                      "value": "{{limit}}"
                    },
                    {
                      "key": "page",
                      "value": "{{page}}"
                    },
                    {
                      "key": "country",
                      "value": "{{country}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b1b19a54-3c67-432f-b6a4-5e5cfa066bd3",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        limit: null,",
                      "        page: null,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 2,",
                      "        country: null,",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 0,",
                      "        page: -1,",
                      "        country: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"HU\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "    {",
                      "        limit: 5,",
                      "        page: 1,",
                      "        country: \"ASDASD\",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined,",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ff65b479-2a2b-472e-9dc9-b8a377ed1cf6"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "8f918ab7-2a30-4f0a-8d51-95615009759e",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "7ddea602-0901-45e2-8a5f-1869e8cb420c"
                  }
                }
              ]
            },
            {
              "id": "caa26f81-29f6-4a41-a297-aa23a00b6cf1",
              "name": "GET player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "61322e0a-98db-498e-9b39-4a8672d02e68",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: 1,",
                      "        expectedStatus: 404,",
                      "        expectedMessage: \"Player not found\",",
                      "    },",
                      "    {",
                      "        id: \"df77015a-4527-4650-913e-2fd4729f033a\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: undefined,",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "bb2f0d79-ade9-40e6-ad94-301563334bf0"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "0ce815ce-dcf1-47e5-b77b-4e4ca1affa49",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "});",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "5dcd8927-74cb-4400-b6e3-386b26d69bad"
                  }
                }
              ]
            },
            {
              "id": "f5f7563d-00db-4356-b654-f3b27bbb7108",
              "name": "POST player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"{{username}}\",\n  \"email\": \"{{email}}\",\n  \"birthDate\": \"{{birthDate}}\",\n  \"balance\": {{balance}},\n  \"country\": \"{{country}}\"\n}",
                  "options": {
                    "raw": {
                      "language": "json"
                    }
                  }
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "4a7b1bbf-02d6-4e82-b166-1be982b7ad97",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"What \",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer {}\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2024-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 0,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: -50,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"ASDASD\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        username: \"test\",",
                      "        email: \"johndoe@gmail.com\",",
                      "        birthDate: \"2000-01-01\",",
                      "        balance: 5000,",
                      "        country: \"HU\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 201,",
                      "        expectedMessage: undefined",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "025b451c-f2b3-466a-ac2c-d7dcebd8121a"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "f555a536-750d-4e49-8a18-8a31f309a0e9",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "pm.environment.set(\"playerId\", response.id);",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "ae9c16ad-19fe-4bee-9c9f-055e9421a477"
                  }
                }
              ]
            },
            {
              "id": "35e181c5-4739-4523-ac19-00c497a9edc7",
              "name": "DELETE player",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "players",
                    "{{id}}"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "{{testToken}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "402b1067-dede-4de6-b2af-8b146988ed61",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"What X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer X\",",
                      "        expectedStatus: 401,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 204,",
                      "        expectedMessage: undefined",
                      "    },",
                      "    {",
                      "        id: \"12345678-05b7-4d76-969c-c7336e247ca6\",",
                      "        tokenPrefix: \"Bearer \",",
                      "        expectedStatus: 404,",
                      "        expectedMessage: undefined",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    if (currentCase.id === undefined) {",
                      "        currentCase.id = pm.environment.get(\"playerId\");",
                      "    }",
                      "",
                      "    currentCase.testToken = currentCase.tokenPrefix + pm.environment.get(\"token\");",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "85601c37-89a5-468e-bca9-350fa1663872"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "382c576f-8081-4b0a-b80f-90d122201eb1",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.code === 204 ? null : pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 204 ? response.message : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "e6e7d8c4-7e35-43ff-8da7-2001e3ff52e9"
                  }
                }
              ]
            },
            {
              "id": "9aa587f5-2bd1-44dc-ac93-c060e5ae4661",
              "name": "GET stats",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "stats"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "c2dd9dd2-46eb-4adc-96e6-4eb5b67fdd21",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "",
                      "pm.test(\"Response keys are valid\", function () {",
                      "    Object.keys(pm.response.json()).forEach(key => {",
                      "        pm.expect(key.length).to.eql(2);",
                      "        pm.expect(key.toUpperCase()).to.eql(key);",
                      "    })",
                      "});"
                    ],
                    "_lastExecutionId": "ae2eb56f-ccb4-482f-b7b6-4cfa1013f62f"
                  }
                }
              ]
            },
            {
              "id": "c8988607-2b2f-474c-b1f9-fd109a18d99b",
              "name": "GET evaluate texas",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "texas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "190c4838-0798-474e-a0e3-6f37dfe8b98b",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        hand: \"AcAs\",",
                      "        board: \"AhKhQhJhTh\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"KhQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"high card\"",
                      "    },",
                      "    {",
                      "        hand: \"3sQh\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s5h\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"two pair\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h5d7c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"three of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4d\",",
                      "        board: \"Ah5d6c9s7s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight\"",
                      "    },",
                      "    {",
                      "        hand: \"3h4h\",",
                      "        board: \"Ah5h6c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"flush\"",
                      "    },",
                      "    {",
                      "        hand: \"3h3s\",",
                      "        board: \"3c4h4c9h6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"full house\"",
                      "    },",
                      "    {",
                      "        hand: \"3s3d\",",
                      "        board: \"3h3c6c9s6s\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"four of a kind\"",
                      "    },",
                      "    {",
                      "        hand: \"3s4s\",",
                      "        board: \"5s6s7s9sTs\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"straight flush\"",
                      "    },",
                      "    {",
                      "        hand: \"As4s\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 200,",
                      "        expectedMessage: \"royal flush\"",
                      "    },",
                      "    {",
                      "        hand: \"AsAs\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 500,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: null,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"ASD\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"ASDAA\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"1234\",",
                      "        board: \"KsQsJsTs5c\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: \"KsQs\",",
                      "        board: \"1234567890\",",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "    {",
                      "        hand: undefined,",
                      "        board: undefined,",
                      "        expectedStatus: 400,",
                      "        expectedMessage: \"Invalid Texas input\"",
                      "    },",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "2d52e37f-d7cf-4fbc-8bc1-6cace041c39b"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "1601155e-1033-46b1-98b3-d2c6fdae0c76",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "69a723cf-2076-499a-af30-3c640be273dc"
                  }
                }
              ]
            },
            {
              "id": "cd457072-e6d4-4243-b8f2-c17609d1c7eb",
              "name": "GET evaluate omaha",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "evaluate",
                    "omaha"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "hand",
                      "value": "{{hand}}"
                    },
                    {
                      "key": "board",
                      "value": "{{board}}"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "prerequest",
                  "script": {
                    "id": "b93d2d54-3ad5-48bb-ae94-197caab22205",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "const testCases = [",
                      "    {",
                      "        \"hand\": \"QhJh9d2c\",",
                      "        \"board\": \"AhKhTh8h2d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"royal flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9h8h7h6d\",",
                      "        \"board\": \"ThJhQh2c3d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"7s7c2d3h\",",
                      "        \"board\": \"7d7hQdKs5s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"four of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AdAh9s9c\",",
                      "        \"board\": \"Ac8dQs8s3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"full house\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"5h6h9c2d\",",
                      "        \"board\": \"AhKhTh8h3h\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"flush\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"9d8c7h2s\",",
                      "        \"board\": \"6s5cThJcQd\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"straight\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"QcQs3d7s\",",
                      "        \"board\": \"Qh9h2c5d7d\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"three of a kind\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"AsKd3c2h\",",
                      "        \"board\": \"AhKc4d7s8c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"two pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"6c7d3s2h\",",
                      "        \"board\": \"AhKhTdJd3c\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"pair\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d5s9cJd\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 200,",
                      "        \"expectedMessage\": \"high card\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d\",",
                      "        \"board\": \"AhQc8h7s4s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"2s3s\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": null,",
                      "        \"board\": undefined,",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"12345678\",",
                      "        \"board\": \"2d3d4d5d6d\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d3d4d5d\",",
                      "        \"board\": \"1234567890\",",
                      "        \"expectedStatus\": 400,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    },",
                      "    {",
                      "        \"hand\": \"2d2d2d2d\",",
                      "        \"board\": \"2d2d2d2d2d\",",
                      "        \"expectedStatus\": 500,",
                      "        \"expectedMessage\": \"Invalid Omaha input\"",
                      "    }",
                      "];",
                      "",
                      "pm.variables.set(\"testCaseCount\", testCases.length);",
                      "",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "",
                      "if (index >= testCases.length) {",
                      "    pm.execution.setNextRequest(null);  // Stop running",
                      "} else {",
                      "    let currentCase = testCases[index];",
                      "",
                      "    Object.keys(currentCase).forEach(key => {",
                      "        pm.variables.set(key, currentCase[key]);",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "633a3178-4b79-4201-a8c9-9dcd2859f2fd"
                  }
                },
                {
                  "listen": "test",
                  "script": {
                    "id": "5fe64ec1-e249-4bbc-a44b-471e92883d3d",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      "//let testCases = JSON.parse(pm.environment.get(\"testCases\"));",
                      "let index = parseInt(pm.variables.get(\"testCaseIndex\")) || 0;",
                      "const response = pm.response.json();",
                      "",
                      "pm.test(\"Status code is \" + pm.variables.get(\"expectedStatus\"), function () {",
                      "    pm.response.to.have.status(pm.variables.get(\"expectedStatus\"));",
                      "});",
                      "",
                      "const expectedMessage = pm.variables.get(\"expectedMessage\");",
                      "",
                      "if (expectedMessage !== undefined) {",
                      "    pm.test(\"Message is \" + expectedMessage, function () {",
                      "    pm.expect(pm.variables.get(\"expectedStatus\") === 200 ? response.handRank : response.error).to.eql(expectedMessage);",
                      "    });",
                      "}",
                      "",
                      "if (pm.variables.get(\"testCaseCount\") === ++index) {",
                      "    pm.variables.unset(\"testCaseIndex\");",
                      "    pm.variables.unset(\"testCaseCount\");",
                      "} else {",
                      "    pm.variables.set(\"testCaseIndex\", index);",
                      "    pm.execution.setNextRequest(pm.info.requestName);",
                      "}"
                    ],
                    "_lastExecutionId": "f45a90f9-c061-4883-b503-be1b121787f1"
                  }
                }
              ]
            },
            {
              "id": "3c211dd1-819c-44e8-8bb2-6932e2a063e9",
              "name": "GET coverage",
              "request": {
                "url": {
                  "path": [
                    "api",
                    "coverage"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "df6a9fcf-588d-4cbb-a19a-82d24715a7bf",
                    "type": "text/javascript",
                    "packages": {},
                    "exec": [
                      ""
                    ],
                    "_lastExecutionId": "23614665-0426-48ea-a0a0-a70f458613aa"
                  }
                }
              ]
            }
          ],
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "id": "de3d11db-11a8-4159-950d-b2dfda6091a6",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "c0106eb1-c5f5-47d2-a581-ee3ed6cb96dc"
              }
            },
            {
              "listen": "test",
              "script": {
                "id": "d9b54e79-4e00-49b9-9652-7d85a6ce886b",
                "type": "text/javascript",
                "packages": {},
                "exec": [
                  ""
                ],
                "_lastExecutionId": "855b4338-e68f-4918-be2c-759f1bf5e9d2"
              }
            }
          ],
          "variable": [
            {
              "type": "string",
              "value": "http://localhost:2345",
              "key": "baseUrl"
            }
          ],
          "info": {
            "_postman_id": "1f0e17b6-7b61-4888-a137-13fb0df29b35",
            "name": "_Poker API",
            "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
          }
        },
        "cursor": {
          "ref": "e1fa6faf-f479-4dce-92e3-4aaabb70e736",
          "length": 9,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "e34ef631-bd65-4e70-979f-e0bd5735131d",
          "scriptId": "382c576f-8081-4b0a-b80f-90d122201eb1"
        }
      }
    ],
    "error": null
  }
}